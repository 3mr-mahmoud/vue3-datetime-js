!function(g,I){"object"==typeof exports&&"object"==typeof module?module.exports=I(require("vue"),require("moment-jalaali")):"function"==typeof define&&define.amd?define(["vue","moment-jalaali"],I):"object"==typeof exports?exports.VueDatetimeJs=I(require("vue"),require("moment-jalaali")):g.VueDatetimeJs=I(g.vue,g["moment-jalaali"])}(self,(function(__WEBPACK_EXTERNAL_MODULE__380__,__WEBPACK_EXTERNAL_MODULE__239__){return function(){var __webpack_modules__={142:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".fade-enter-active,.fade-leave-active{-webkit-transition:opacity .5s;transition:opacity .5s}.fade-enter,.fade-leave-active{opacity:0}.fade-scale-enter-active,.fade-scale-leave-active{-webkit-transition:opacity .5s;transition:opacity .5s}.fade-scale-enter,.fade-scale-leave-active{opacity:0}.fade-scale-enter .vpd-content,.fade-scale-leave-active .vpd-content{-webkit-transform:scale(0.7, 0.7);transform:scale(0.7, 0.7);opacity:0}.slideX-enter-active,.slideX-leave-active{position:absolute;top:0;bottom:0;right:0;left:0;opacity:1;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:all .3s ease-out;transition:all .3s ease-out}.slideX-leave-to,.slideX-enter{opacity:0}.direction-next .slideX-leave-to{-webkit-transform:translateX(-100%);transform:translateX(-100%)}.direction-next .slideX-enter{-webkit-transform:translateX(100%);transform:translateX(100%)}.direction-prev .slideX-leave-to{-webkit-transform:translateX(100%);transform:translateX(100%)}.direction-prev .slideX-enter{-webkit-transform:translateX(-100%);transform:translateX(-100%)}.slideY-enter-active,.slideY-leave-active{position:absolute;top:0;bottom:0;right:0;left:0;opacity:1;-webkit-transform:translateY(0);transform:translateY(0);-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out}.slideY-leave-to,.slideY-enter{opacity:0}.direction-next .slideY-leave-to{-webkit-transform:translateY(100%);transform:translateY(100%)}.direction-next .slideY-enter{-webkit-transform:translateY(-100%);transform:translateY(-100%)}.direction-prev .slideY-leave-to{-webkit-transform:translateY(-100%);transform:translateY(-100%)}.direction-prev .slideY-enter{-webkit-transform:translateY(100%);transform:translateY(100%)}.fade-transition{opacity:1;-webkit-transition:all .3s ease;transition:all .3s ease}.fade-enter,.fade-leave{opacity:0}.fast-updating .slideY-enter-active,.fast-updating .slideY-leave-active{-webkit-transition:all 170ms ease-in-out;transition:all 170ms ease-in-out}.fast-updating .direction-next .slideY-leave-to{-webkit-transform:translateY(45%);transform:translateY(45%)}.fast-updating .direction-next .slideY-enter{-webkit-transform:translateY(-5%);transform:translateY(-5%)}.fast-updating .direction-prev .slideY-leave-to{-webkit-transform:translateY(-45%);transform:translateY(-45%)}.fast-updating .direction-prev .slideY-enter{-webkit-transform:translateY(5%);transform:translateY(5%)}.vpd-dir-rtl .direction-next .slideX-leave-to{-webkit-transform:translateX(100%);transform:translateX(100%)}.vpd-dir-rtl .direction-next .slideX-enter{-webkit-transform:translateX(-100%);transform:translateX(-100%)}.vpd-dir-rtl .direction-prev .slideX-leave-to{-webkit-transform:translateX(-100%);transform:translateX(-100%)}.vpd-dir-rtl .direction-prev .slideX-enter{-webkit-transform:translateX(100%);transform:translateX(100%)}.clearfix:after,.clearfix:before{content:\\" \\";display:table}.clearfix:after{clear:both}.vpd-input-group{display:table;width:100%;position:relative}.vpd-input-group input{display:table-cell;border:1px solid #dadada;border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;line-height:30px;padding:0 10px}.vpd-input-group input:not(.is-editable){cursor:pointer}.vpd-input-group label{color:#fff;white-space:nowrap}.vpd-input-group label svg+span{display:inline-block;margin-right:4px;vertical-align:middle}.vpd-input-group.disabled input,.vpd-input-group.disabled label{cursor:default}.vpd-input-group .vpd-clear-btn{position:absolute;left:0;top:0;line-height:32px;width:30px;cursor:pointer;text-align:center;font-style:normal;font-family:monospace,sans-serif;opacity:.4}.vpd-input-group .vpd-clear-btn:hover{opacity:.7}.vpd-icon-btn{display:table-cell;width:1%;cursor:pointer;padding:0 10px;vertical-align:middle}.vpd-icon-btn>svg{vertical-align:middle}.vpd-wrapper{position:fixed;top:0;left:0;right:0;bottom:0;width:100%;height:100%;background-color:rgba(0,0,0,.5);z-index:9999}.vpd-container{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);user-select:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none}.vpd-content{opacity:1;-webkit-transition:all .4s cubic-bezier(0.25, 0.1, 0.17, 1.84);transition:all .4s cubic-bezier(0.25, 0.1, 0.17, 1.84);text-align:right;direction:rtl;width:316px;background-color:#fff;-webkit-box-shadow:5px 22px 95px -14px #000;box-shadow:5px 22px 95px -14px #000;cursor:default}.vpd-header{color:#fff;padding:10px 20px;position:relative}.vpd-body{position:relative}.vpd-year-label{margin-bottom:2px;position:relative;height:24px;opacity:.7;overflow:hidden;cursor:pointer;font-size:16px}.vpd-year-label>span{display:inline-block;padding:0 10px;line-height:22px;height:22px;border-width:1px;border-style:solid;border-radius:2px;-webkit-transition:all .1s ease-out;transition:all .1s ease-out}.vpd-year-label>span:not(:hover){border-color:rgba(0,0,0,0) !important;color:inherit !important}.vpd-date{position:relative;font-size:28px;line-height:40px;height:40px;overflow:hidden}.vpd-date span{display:block;height:inherit;line-height:inherit}.vpd-week{font-size:12px;padding:0 14px;line-height:20px;color:#b9b9b9;margin-bottom:10px;height:20px}.vpd-weekday{float:right;width:40px;text-align:center}.vpd-days{padding:0 18px;position:relative;overflow:hidden;-webkit-transition:height 300ms cubic-bezier(0.75, 0.02, 0.27, 0.99);transition:height 300ms cubic-bezier(0.75, 0.02, 0.27, 0.99)}.vpd-day{width:40px;height:40px;float:right;line-height:40px;position:relative}.vpd-day:not(.empty){cursor:pointer;-webkit-transition:color 450ms ease;transition:color 450ms ease;text-align:center}.vpd-day[disabled=true]{cursor:default;color:#ccc}.vpd-day[disabled=true] .vpd-day-effect{background-color:rgba(0,0,0,0)}.vpd-day[disabled=true] .vpd-day-text{color:#ccc}.vpd-day:not([disabled=true]):hover{color:#fff}.vpd-day:not([disabled=true]):hover .vpd-day-effect{-webkit-transform:scale(1);transform:scale(1);opacity:.6}.vpd-day:not([disabled=true]).selected{color:#fff}.vpd-day:not([disabled=true]).selected .vpd-day-effect{-webkit-transform:scale(1);transform:scale(1);opacity:1}.vpd-day-effect{position:absolute;width:36px;height:36px;border-radius:50%;top:2px;left:2px;-webkit-transform:scale(0);transform:scale(0);opacity:0;-webkit-transition:all 450ms ease;transition:all 450ms ease}.vpd-day-text{position:relative}.vpd-controls{position:relative;z-index:2;height:50px;line-height:50px;text-align:center}.vpd-controls button{position:relative;background-color:rgba(0,0,0,0);border:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:none;cursor:pointer}.vpd-controls button[disabled=true]{opacity:.3;cursor:default}.vpd-next,.vpd-prev{width:50px;height:50px;line-height:50px}.vpd-next{float:right}.vpd-prev{float:left}.vpd-arrow{width:11px;height:11px}.vpd-month{position:relative;overflow:hidden}.vpd-month-label{position:absolute;top:0;left:50px;right:50px;overflow:hidden;width:95px;margin-left:auto;margin-right:auto;line-height:50px;height:50px;text-align:center;cursor:pointer}.vpd-month-label>span{display:inline-block;padding:0 5px;line-height:26px;height:26px;border-width:1px;border-style:solid;border-radius:2px;-webkit-transition:all .1s ease-out;transition:all .1s ease-out;white-space:nowrap}.vpd-month-label>span:not(:hover){border-color:rgba(0,0,0,0) !important;color:inherit !important}.vpd-actions{text-align:right;padding:8px}.vpd-actions button{border:none;background-color:rgba(0,0,0,0);display:inline-block;cursor:pointer;outline:none;font-size:14px;text-transform:uppercase;min-width:88px;text-align:center;-webkit-appearance:none;line-height:36px;height:36px;-webkit-transition:all .3s ease;transition:all .3s ease}.vpd-actions button:hover{background-color:#f2f2f2}.vpd-actions button[disabled=true]{opacity:.6;cursor:default}.vpd-addon-list-content{direction:rtl}.vpd-addon-list-item{width:33.3333333333%;text-align:center;font-size:14px;height:44px;line-height:36px;-webkit-transition:all .3s ease;transition:all .3s ease;color:#8a8a8a;cursor:pointer;float:right;border:solid 4px #fff}.vpd-addon-list-item.selected,.vpd-addon-list-item:hover{background-color:#f9f9f9}.vpd-addon-list-item.selected{font-size:17px;background-color:#f5f5f5}.vpd-addon-list{width:100%;background-color:#fff;position:absolute;z-index:2;overflow:auto;top:0;bottom:52px;border-bottom:solid 1px #eee;direction:ltr}.vpd-addon-list.can-close{padding-top:30px}.vpd-month-list{padding-top:15px}.vpd-month-list .vpd-addon-list-item{height:54px;line-height:46px}.vpd-addon-list-item[disabled=true]{opacity:.3;cursor:default !important;background-color:rgba(0,0,0,0) !important}.vpd-close-addon{position:absolute;top:4px;left:4px;z-index:2;width:30px;height:30px;line-height:30px;color:#444;font-family:sans-serif;text-align:center;cursor:pointer;background-color:rgba(0,0,0,.1)}.vpd-time{-ms-user-select:none;user-select:none;-moz-user-select:none;-webkit-user-select:none}.vpd-time .vpd-time-h,.vpd-time .vpd-time-m{position:relative;margin-top:70px;float:left;width:50%;height:100%;text-align:center;color:#a2a2a2;font-family:sans-serif}.vpd-time .vpd-time-h .counter,.vpd-time .vpd-time-m .counter{font-size:90px;height:100px;line-height:100px;overflow:hidden;position:relative;direction:ltr;-webkit-transition:opacity .3s ease-in-out;transition:opacity .3s ease-in-out}.vpd-time .vpd-time-h .counter-item,.vpd-time .vpd-time-m .counter-item{height:inherit;width:51px;display:inline-block;vertical-align:text-top;position:relative}.vpd-time .vpd-time-h:after{position:absolute;top:50%;right:0;content:\\":\\";font-size:70px;-webkit-transform:translate(50%, -50%);transform:translate(50%, -50%);-webkit-transition:inherit;transition:inherit}.vpd-time .up-arrow-btn,.vpd-time .down-arrow-btn{display:block;cursor:pointer;outline:none;height:34px}.vpd-time.disabled .counter-item{opacity:.5}.vpd-prev-step{position:absolute;top:0;left:0;width:30px;height:30px;text-align:center;padding:9px;cursor:pointer}.vpd-prev-step:hover{background-color:rgba(0,0,0,.2)}[data-type=time] .vpd-time .vpd-time-m,[data-type=time] .vpd-time .vpd-time-h{margin-top:40px}.vpd-is-inline{position:static;background-color:rgba(0,0,0,0);height:auto;width:auto;display:block;margin-top:2px}.vpd-is-inline .vpd-container{position:static;-webkit-transform:none;transform:none}.vpd-is-inline .vpd-content{-webkit-box-shadow:0 0 1px -1px #000;box-shadow:0 0 1px -1px #000}.vpd-no-footer .vpd-addon-list{bottom:0;border-bottom:none}@media screen and (max-height: 460px){.vpd-wrapper{overflow:auto;text-align:center}.vpd-wrapper .vpd-container{position:relative;top:0;left:0;-webkit-transform:none;transform:none;display:inline-block;margin:20px auto}}.vpd-locales{list-style-type:none;padding:0;margin:0;position:absolute;left:14px;top:12px;line-height:24px;text-align:center;opacity:.7}.vpd-locales li{cursor:pointer}.vpd-locales li.active{display:none}.vpd-dir-ltr .vpd-content,.vpd-dir-ltr .vpd-actions,.vpd-dir-ltr .vpd-addon-list-content{direction:ltr}.vpd-dir-ltr .vpd-content,.vpd-dir-ltr .vpd-actions{text-align:left;font-family:sans-serif}.vpd-dir-ltr .vpd-month-label{font-size:90%}.vpd-dir-ltr .vpd-addon-list-item,.vpd-dir-ltr .vpd-weekday,.vpd-dir-ltr .vpd-day{float:left}.vpd-dir-ltr .vpd-locales{left:auto;right:14px}.vpd-dir-rtl .vpd-next,.vpd-dir-rtl .vpd-prev{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}.vpd-dir-rtl .vpd-next{float:left}.vpd-dir-rtl .vpd-prev{float:right}", "",{"version":3,"sources":["webpack://./src/picker/assets/scss/_transitions.scss","webpack://./src/picker/assets/scss/style.scss","webpack://./src/picker/assets/scss/_variables.scss"],"names":[],"mappings":"AAAA,sCACE,8BAAA,CAAA,sBAAA,CAGF,+BACE,SAAA,CAGF,kDACE,8BAAA,CAAA,sBAAA,CAGF,2CACE,SAAA,CAEA,qEACE,iCAAA,CAAA,yBAAA,CACA,SAAA,CAIJ,0CAEE,iBAAA,CACA,KAAA,CACA,QAAA,CACA,OAAA,CACA,MAAA,CACA,SAAA,CACA,+BAAA,CAAA,uBAAA,CACA,mCAAA,CAAA,2BAAA,CAGF,+BACE,SAAA,CAIA,iCACE,mCAAA,CAAA,2BAAA,CAGF,8BACE,kCAAA,CAAA,0BAAA,CAKF,iCACE,kCAAA,CAAA,0BAAA,CAGF,8BACE,mCAAA,CAAA,2BAAA,CAIJ,0CAEE,iBAAA,CACA,KAAA,CACA,QAAA,CACA,OAAA,CACA,MAAA,CACA,SAAA,CACA,+BAAA,CAAA,uBAAA,CACA,sCAAA,CAAA,8BAAA,CAGF,+BACE,SAAA,CAIA,iCACE,kCAAA,CAAA,0BAAA,CAGF,8BACE,mCAAA,CAAA,2BAAA,CAKF,iCACE,mCAAA,CAAA,2BAAA,CAGF,8BACE,kCAAA,CAAA,0BAAA,CAIJ,iBACE,SAAA,CACA,+BAAA,CAAA,uBAAA,CAGF,wBACE,SAAA,CAIA,wEAEE,wCAAA,CAAA,gCAAA,CAIA,gDACE,iCAAA,CAAA,yBAAA,CAGF,6CACE,iCAAA,CAAA,yBAAA,CAKF,gDACE,kCAAA,CAAA,0BAAA,CAGF,6CACE,gCAAA,CAAA,wBAAA,CAOF,8CACE,kCAAA,CAAA,0BAAA,CAGF,2CACE,mCAAA,CAAA,2BAAA,CAKF,8CACE,mCAAA,CAAA,2BAAA,CAGF,2CACE,kCAAA,CAAA,0BAAA,CC9IJ,iCACE,WAAA,CACA,aAAA,CAGF,gBACE,UAAA,CAIJ,iBACE,aAAA,CACA,UAAA,CACA,iBAAA,CAEA,uBACE,kBAAA,CACA,wBAAA,CACA,iBAAA,CACA,yBAAA,CACA,4BAAA,CACA,gBAAA,CACA,cAAA,CAEA,yCACE,cAAA,CAIJ,uBACE,UAAA,CACA,kBAAA,CAEA,gCACE,oBAAA,CACA,gBAAA,CACA,qBAAA,CAKF,gEACE,cAAA,CAIJ,gCACE,iBAAA,CACA,MAAA,CACA,KAAA,CACA,gBAAA,CACA,UAAA,CACA,cAAA,CACA,iBAAA,CACA,iBAAA,CACA,gCAAA,CACA,UAAA,CAEA,sCACE,UAAA,CAKN,cACE,kBAAA,CACA,QAAA,CACA,cAAA,CACA,cAAA,CACA,qBAAA,CAEA,kBACE,qBAAA,CAIJ,aACE,cAAA,CACA,KAAA,CACA,MAAA,CACA,OAAA,CACA,QAAA,CACA,UAAA,CACA,WAAA,CACA,+BAAA,CACA,YAAA,CAGF,eACE,iBAAA,CACA,OAAA,CACA,QAAA,CACA,uCAAA,CAAA,+BAAA,CACA,gBAAA,CACA,wBAAA,CACA,qBAAA,CACA,oBAAA,CAGF,aACE,SAAA,CACA,8DAAA,CAAA,sDAAA,CACA,gBAAA,CACA,aAAA,CACA,WC3GM,CD4GN,qBAAA,CACA,2CAAA,CAAA,mCAAA,CACA,cAAA,CAGF,YACE,UAAA,CACA,iBAAA,CACA,iBAAA,CAGF,UACE,iBAAA,CAGF,gBACE,iBAAA,CACA,iBAAA,CACA,WAAA,CACA,UAAA,CACA,eAAA,CACA,cAAA,CACA,cAAA,CAEA,qBACE,oBAAA,CACA,cAAA,CACA,gBAAA,CACA,WAAA,CACA,gBAAA,CACA,kBAAA,CACA,iBAAA,CACA,mCAAA,CAAA,2BAAA,CAEA,iCACE,qCAAA,CACA,wBAAA,CAKN,UACE,iBAAA,CACA,cAAA,CACA,gBAAA,CACA,WAAA,CACA,eAAA,CAEA,eACE,aAAA,CACA,cAAA,CACA,mBAAA,CAIJ,UACE,cAAA,CACA,cAAA,CACA,gBAAA,CACA,aAAA,CACA,kBAAA,CACA,WAAA,CAGF,aACE,WAAA,CACA,UC5KS,CD6KT,iBAAA,CAGF,UACE,cAAA,CACA,iBAAA,CACA,eAAA,CACA,oEAAA,CAAA,4DAAA,CAGF,SACE,UCxLS,CDyLT,WCzLS,CD0LT,WAAA,CACA,gBC3LS,CD4LT,iBAAA,CAEA,qBACE,cAAA,CACA,mCAAA,CAAA,2BAAA,CACA,iBAAA,CAGF,wBACE,cAAA,CACA,UAAA,CAEA,wCACE,8BAAA,CAGF,sCACE,UAAA,CAKF,oCACE,UAAA,CAEA,oDACE,0BAAA,CAAA,kBAAA,CACA,UAAA,CAIJ,uCACE,UAAA,CAEA,uDACE,0BAAA,CAAA,kBAAA,CACA,SAAA,CAMR,gBACE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,0BAAA,CAAA,kBAAA,CACA,SAAA,CACA,iCAAA,CAAA,yBAAA,CAGF,cACE,iBAAA,CAGF,cACE,iBAAA,CACA,SAAA,CACA,WCxPmB,CDyPnB,gBCzPmB,CD0PnB,iBAAA,CAEA,qBACE,iBAAA,CACA,8BAAA,CACA,WAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,oBAAA,CAAA,gBAAA,CACA,YAAA,CACA,cAAA,CAEA,oCACE,UAAA,CACA,cAAA,CAKN,oBAEE,UC7QmB,CD8QnB,WC9QmB,CD+QnB,gBC/QmB,CDkRrB,UACE,WAAA,CAGF,UACE,UAAA,CAGF,WACE,UAAA,CACA,WAAA,CAGF,WACE,iBAAA,CACA,eAAA,CAGF,iBACE,iBAAA,CACA,KAAA,CACA,SCvSmB,CDwSnB,UCxSmB,CDySnB,eAAA,CACA,UAAA,CACA,gBAAA,CACA,iBAAA,CACA,gBC7SmB,CD8SnB,WC9SmB,CD+SnB,iBAAA,CACA,cAAA,CAEA,sBACE,oBAAA,CACA,aAAA,CACA,gBAAA,CACA,WAAA,CACA,gBAAA,CACA,kBAAA,CACA,iBAAA,CACA,mCAAA,CAAA,2BAAA,CACA,kBAAA,CAEA,kCACE,qCAAA,CACA,wBAAA,CAKN,aACE,gBAAA,CACA,WAAA,CAEA,oBACE,WAAA,CACA,8BAAA,CACA,oBAAA,CACA,cAAA,CACA,YAAA,CACA,cAAA,CACA,wBAAA,CACA,cAAA,CACA,iBAAA,CACA,uBAAA,CACA,gBAAA,CACA,WAAA,CACA,+BAAA,CAAA,uBAAA,CAEA,0BACE,wBAAA,CAGF,mCACE,UAAA,CACA,cAAA,CAKN,wBACE,aAAA,CAGF,qBACE,oBAAA,CACA,iBAAA,CACA,cAAA,CACA,WAAA,CACA,gBAAA,CACA,+BAAA,CAAA,uBAAA,CACA,aAAA,CACA,cAAA,CACA,WAAA,CACA,qBAAA,CAEA,yDACE,wBAAA,CAGF,8BACE,cAAA,CACA,wBAAA,CAIJ,gBACE,UAAA,CACA,qBAAA,CACA,iBAAA,CACA,SAAA,CACA,aAAA,CACA,KAAA,CACA,WAAA,CACA,4BAAA,CACA,aAAA,CAEA,0BACE,gBAAA,CAIJ,gBACE,gBAAA,CAEA,qCACE,WAAA,CACA,gBAAA,CAOJ,oCACE,UAAA,CACA,yBAAA,CACA,yCAAA,CAGF,iBACE,iBAAA,CACA,OAAA,CACA,QAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CACA,gBAAA,CACA,UAAA,CACA,sBAAA,CACA,iBAAA,CACA,cAAA,CACA,+BAAA,CAGF,UACE,oBAAA,CAAA,gBAAA,CACA,qBAAA,CACA,wBAAA,CAEA,4CAEE,iBAAA,CACA,eAAA,CACA,UAAA,CACA,SAAA,CACA,WAAA,CACA,iBAAA,CACA,aAAA,CACA,sBAAA,CAEA,8DACE,cAAA,CACA,YAAA,CACA,iBAAA,CACA,eAAA,CACA,iBAAA,CACA,aAAA,CACA,0CAAA,CAAA,kCAAA,CAGF,wEACE,cAAA,CACA,UAAA,CACA,oBAAA,CACA,uBAAA,CACA,iBAAA,CAIJ,4BACE,iBAAA,CACA,OAAA,CACA,OAAA,CACA,WAAA,CACA,cAAA,CACA,sCAAA,CAAA,8BAAA,CACA,0BAAA,CAAA,kBAAA,CAGF,kDAEE,aAAA,CACA,cAAA,CACA,YAAA,CACA,WAAA,CAMF,iCACE,UAAA,CAIJ,eACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,WAAA,CACA,cAAA,CAEA,qBACE,+BAAA,CAMA,8EAEE,eAAA,CAKN,eACE,eAAA,CACA,8BAAA,CACA,WAAA,CACA,UAAA,CACA,aAAA,CACA,cAAA,CAEA,8BACE,eAAA,CACA,sBAAA,CAAA,cAAA,CAGF,4BACE,oCAAA,CAAA,4BAAA,CAKF,+BACE,QAAA,CACA,kBAAA,CAIJ,sCACE,aACE,aAAA,CACA,iBAAA,CAEA,4BACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,sBAAA,CAAA,cAAA,CACA,oBAAA,CACA,gBAAA,CAAA,CAKN,aACE,oBAAA,CACA,SAAA,CACA,QAAA,CACA,iBAAA,CACA,SAAA,CACA,QAAA,CACA,gBAAA,CACA,iBAAA,CACA,UAAA,CAEA,gBACE,cAAA,CAEA,uBACE,YAAA,CAMJ,yFAGE,aAAA,CAGF,oDAEE,eAAA,CACA,sBAAA,CAGF,8BACE,aAAA,CAGF,kFAGE,UAAA,CAGF,0BACE,SAAA,CACA,UAAA,CAKF,8CAEE,iCAAA,CAAA,yBAAA,CAGF,uBACE,UAAA,CAGF,uBACE,WAAA","sourcesContent":[".fade-enter-active, .fade-leave-active {\\n  transition: opacity .5s\\n}\\n\\n.fade-enter, .fade-leave-active {\\n  opacity: 0\\n}\\n\\n.fade-scale-enter-active, .fade-scale-leave-active {\\n  transition: opacity .5s\\n}\\n\\n.fade-scale-enter, .fade-scale-leave-active {\\n  opacity: 0;\\n\\n  .#{$prefix}content {\\n    transform: scale(0.7, 0.7);\\n    opacity: 0;\\n  }\\n}\\n\\n.slideX-enter-active,\\n.slideX-leave-active {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  right: 0;\\n  left: 0;\\n  opacity: 1;\\n  transform: translateX(0);\\n  transition: all .3s ease-out;\\n}\\n\\n.slideX-leave-to, .slideX-enter {\\n  opacity: 0;\\n}\\n\\n.direction-next {\\n  .slideX-leave-to {\\n    transform: translateX(-100%);\\n  }\\n\\n  .slideX-enter {\\n    transform: translateX(100%);\\n  }\\n}\\n\\n.direction-prev {\\n  .slideX-leave-to {\\n    transform: translateX(100%);\\n  }\\n\\n  .slideX-enter {\\n    transform: translateX(-100%);\\n  }\\n}\\n\\n.slideY-enter-active,\\n.slideY-leave-active {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  right: 0;\\n  left: 0;\\n  opacity: 1;\\n  transform: translateY(0);\\n  transition: all .3s ease-in-out;\\n}\\n\\n.slideY-leave-to, .slideY-enter {\\n  opacity: 0;\\n}\\n\\n.direction-next {\\n  .slideY-leave-to {\\n    transform: translateY(100%);\\n  }\\n\\n  .slideY-enter {\\n    transform: translateY(-100%);\\n  }\\n}\\n\\n.direction-prev {\\n  .slideY-leave-to {\\n    transform: translateY(-100%);\\n  }\\n\\n  .slideY-enter {\\n    transform: translateY(100%);\\n  }\\n}\\n\\n.fade-transition {\\n  opacity: 1;\\n  transition: all 0.3s ease;\\n}\\n\\n.fade-enter, .fade-leave {\\n  opacity: 0;\\n}\\n\\n.fast-updating {\\n  .slideY-enter-active,\\n  .slideY-leave-active {\\n    transition: all 170ms ease-in-out;\\n  }\\n\\n  .direction-next {\\n    .slideY-leave-to {\\n      transform: translateY(45%);\\n    }\\n\\n    .slideY-enter {\\n      transform: translateY(-5%);\\n    }\\n  }\\n\\n  .direction-prev {\\n    .slideY-leave-to {\\n      transform: translateY(-45%);\\n    }\\n\\n    .slideY-enter {\\n      transform: translateY(5%);\\n    }\\n  }\\n}\\n\\n.#{$prefix}dir-rtl {\\n  .direction-next {\\n    .slideX-leave-to {\\n      transform: translateX(100%);\\n    }\\n\\n    .slideX-enter {\\n      transform: translateX(-100%);\\n    }\\n  }\\n\\n  .direction-prev {\\n    .slideX-leave-to {\\n      transform: translateX(-100%);\\n    }\\n\\n    .slideX-enter {\\n      transform: translateX(100%);\\n    }\\n  }\\n}\\n","@import \'variables\';\\n@import \'transitions\';\\n\\n.clearfix {\\n  &:after, &:before {\\n    content: \\" \\";\\n    display: table;\\n  }\\n\\n  &:after {\\n    clear: both;\\n  }\\n}\\n\\n.#{$prefix}input-group {\\n  display: table;\\n  width: 100%;\\n  position: relative;\\n\\n  input {\\n    display: table-cell;\\n    border: 1px solid #dadada;\\n    border-right: none;\\n    border-top-right-radius: 0;\\n    border-bottom-right-radius: 0;\\n    line-height: 30px;\\n    padding: 0 10px;\\n\\n    &:not(.is-editable) {\\n      cursor: pointer;\\n    }\\n  }\\n\\n  label {\\n    color: white;\\n    white-space: nowrap;\\n\\n    svg + span {\\n      display: inline-block;\\n      margin-right: 4px;\\n      vertical-align: middle;\\n    }\\n  }\\n\\n  &.disabled {\\n    input, label {\\n      cursor: default;\\n    }\\n  }\\n\\n  .#{$prefix}clear-btn {\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n    line-height: 32px;\\n    width: 30px;\\n    cursor: pointer;\\n    text-align: center;\\n    font-style: normal;\\n    font-family: monospace, sans-serif;\\n    opacity: 0.4;\\n\\n    &:hover {\\n      opacity: 0.7;\\n    }\\n  }\\n}\\n\\n.#{$prefix}icon-btn {\\n  display: table-cell;\\n  width: 1%;\\n  cursor: pointer;\\n  padding: 0 10px;\\n  vertical-align: middle;\\n\\n  > svg {\\n    vertical-align: middle;\\n  }\\n}\\n\\n.#{$prefix}wrapper {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: rgba(0, 0, 0, 0.5);\\n  z-index: 9999;\\n}\\n\\n.#{$prefix}container {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n}\\n\\n.#{$prefix}content {\\n  opacity: 1;\\n  transition: all .4s cubic-bezier(0.25, 0.1, 0.17, 1.84);\\n  text-align: right;\\n  direction: rtl;\\n  width: $width;\\n  background-color: #ffffff;\\n  box-shadow: 5px 22px 95px -14px rgba(0, 0, 0, 1);\\n  cursor: default;\\n}\\n\\n.#{$prefix}header {\\n  color: #ffffff;\\n  padding: 10px 20px;\\n  position: relative;\\n}\\n\\n.#{$prefix}body {\\n  position: relative;\\n}\\n\\n.#{$prefix}year-label {\\n  margin-bottom: 2px;\\n  position: relative;\\n  height: 24px;\\n  opacity: 0.7;\\n  overflow: hidden;\\n  cursor: pointer;\\n  font-size: 16px;\\n\\n  > span {\\n    display: inline-block;\\n    padding: 0 10px;\\n    line-height: 22px;\\n    height: 22px;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-radius: 2px;\\n    transition: all 0.1s ease-out;\\n\\n    &:not(:hover) {\\n      border-color: transparent !important;\\n      color: inherit !important;\\n    }\\n  }\\n}\\n\\n.#{$prefix}date {\\n  position: relative;\\n  font-size: 28px;\\n  line-height: 40px;\\n  height: 40px;\\n  overflow: hidden;\\n\\n  span {\\n    display: block;\\n    height: inherit;\\n    line-height: inherit;\\n  }\\n}\\n\\n.#{$prefix}week {\\n  font-size: 12px;\\n  padding: 0 14px;\\n  line-height: 20px;\\n  color: #b9b9b9;\\n  margin-bottom: 10px;\\n  height: 20px;\\n}\\n\\n.#{$prefix}weekday {\\n  float: right;\\n  width: $day-size;\\n  text-align: center;\\n}\\n\\n.#{$prefix}days {\\n  padding: 0 18px;\\n  position: relative;\\n  overflow: hidden;\\n  transition: height 300ms cubic-bezier(0.75, 0.02, 0.27, 0.99);\\n}\\n\\n.#{$prefix}day {\\n  width: $day-size;\\n  height: $day-size;\\n  float: right;\\n  line-height: $day-size;\\n  position: relative;\\n\\n  &:not(.empty) {\\n    cursor: pointer;\\n    transition: color 450ms ease;\\n    text-align: center;\\n  }\\n\\n  &[disabled=true] {\\n    cursor: default;\\n    color: darken(#ffffff, 20%);\\n\\n    .#{$prefix}day-effect {\\n      background-color: transparent;\\n    }\\n\\n    .#{$prefix}day-text {\\n      color: darken(#ffffff, 20%);\\n    }\\n  }\\n\\n  &:not([disabled=true]) {\\n    &:hover {\\n      color: #ffffff;\\n\\n      .#{$prefix}day-effect {\\n        transform: scale(1);\\n        opacity: 0.6;\\n      }\\n    }\\n\\n    &.selected {\\n      color: #ffffff;\\n\\n      .#{$prefix}day-effect {\\n        transform: scale(1);\\n        opacity: 1;\\n      }\\n    }\\n  }\\n}\\n\\n.#{$prefix}day-effect {\\n  position: absolute;\\n  width: $day-size - 4px;\\n  height: $day-size - 4px;\\n  border-radius: 50%;\\n  top: 2px;\\n  left: 2px;\\n  transform: scale(0);\\n  opacity: 0;\\n  transition: all 450ms ease;\\n}\\n\\n.#{$prefix}day-text {\\n  position: relative;\\n}\\n\\n.#{$prefix}controls {\\n  position: relative;\\n  z-index: 2;\\n  height: $month-label-height;\\n  line-height: $month-label-height;\\n  text-align: center;\\n\\n  button {\\n    position: relative;\\n    background-color: transparent;\\n    border: none;\\n    user-select: none;\\n    outline: none;\\n    cursor: pointer;\\n\\n    &[disabled=true] {\\n      opacity: 0.3;\\n      cursor: default;\\n    }\\n  }\\n}\\n\\n.#{$prefix}next,\\n.#{$prefix}prev {\\n  width: $month-label-height;\\n  height: $month-label-height;\\n  line-height: $month-label-height;\\n}\\n\\n.#{$prefix}next {\\n  float: right;\\n}\\n\\n.#{$prefix}prev {\\n  float: left;\\n}\\n\\n.#{$prefix}arrow {\\n  width: 11px;\\n  height: 11px;\\n}\\n\\n.#{$prefix}month {\\n  position: relative;\\n  overflow: hidden;\\n}\\n\\n.#{$prefix}month-label {\\n  position: absolute;\\n  top: 0;\\n  left: $month-label-height;\\n  right: $month-label-height;\\n  overflow: hidden;\\n  width: 95px;\\n  margin-left: auto;\\n  margin-right: auto;\\n  line-height: $month-label-height;\\n  height: $month-label-height;\\n  text-align: center;\\n  cursor: pointer;\\n\\n  > span {\\n    display: inline-block;\\n    padding: 0 5px;\\n    line-height: 26px;\\n    height: 26px;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-radius: 2px;\\n    transition: all 0.1s ease-out;\\n    white-space: nowrap;\\n\\n    &:not(:hover) {\\n      border-color: transparent !important;\\n      color: inherit !important;\\n    }\\n  }\\n}\\n\\n.#{$prefix}actions {\\n  text-align: right;\\n  padding: 8px;\\n\\n  button {\\n    border: none;\\n    background-color: transparent;\\n    display: inline-block;\\n    cursor: pointer;\\n    outline: none;\\n    font-size: 14px;\\n    text-transform: uppercase;\\n    min-width: 88px;\\n    text-align: center;\\n    -webkit-appearance: none;\\n    line-height: 36px;\\n    height: 36px;\\n    transition: all 0.3s ease;\\n\\n    &:hover {\\n      background-color: darken(#ffffff, 5%);\\n    }\\n\\n    &[disabled=true] {\\n      opacity: 0.6;\\n      cursor: default;\\n    }\\n  }\\n}\\n\\n.#{$prefix}addon-list-content {\\n  direction: rtl;\\n}\\n\\n.#{$prefix}addon-list-item {\\n  width: (1/3)*100%;\\n  text-align: center;\\n  font-size: 14px;\\n  height: 44px;\\n  line-height: 36px;\\n  transition: all 0.3s ease;\\n  color: #8a8a8a;\\n  cursor: pointer;\\n  float: right;\\n  border: solid 4px #fff;\\n\\n  &.selected, &:hover {\\n    background-color: #f9f9f9;\\n  }\\n\\n  &.selected {\\n    font-size: 17px;\\n    background-color: #f5f5f5;\\n  }\\n}\\n\\n.#{$prefix}addon-list {\\n  width: 100%;\\n  background-color: #ffffff;\\n  position: absolute;\\n  z-index: 2;\\n  overflow: auto;\\n  top: 0;\\n  bottom: 52px;\\n  border-bottom: solid 1px #eee;\\n  direction: ltr;\\n\\n  &.can-close {\\n    padding-top: 30px;\\n  }\\n}\\n\\n.#{$prefix}month-list {\\n  padding-top: 15px;\\n\\n  .#{$prefix}addon-list-item {\\n    height: 54px;\\n    line-height: 46px;\\n\\n    &.selected, &:hover {\\n    }\\n  }\\n}\\n\\n.#{$prefix}addon-list-item[disabled=true] {\\n  opacity: 0.3;\\n  cursor: default !important;\\n  background-color: transparent !important;\\n}\\n\\n.#{$prefix}close-addon {\\n  position: absolute;\\n  top: 4px;\\n  left: 4px;\\n  z-index: 2;\\n  width: 30px;\\n  height: 30px;\\n  line-height: 30px;\\n  color: #444;\\n  font-family: sans-serif;\\n  text-align: center;\\n  cursor: pointer;\\n  background-color: rgba(0, 0, 0, 0.1);\\n}\\n\\n.#{$prefix}time {\\n  user-select: none;\\n  -moz-user-select: none;\\n  -webkit-user-select: none;\\n\\n  .#{$prefix}time-h,\\n  .#{$prefix}time-m {\\n    position: relative;\\n    margin-top: 70px;\\n    float: left;\\n    width: 50%;\\n    height: 100%;\\n    text-align: center;\\n    color: #a2a2a2;\\n    font-family: sans-serif;\\n\\n    .counter {\\n      font-size: 90px;\\n      height: 100px;\\n      line-height: 100px;\\n      overflow: hidden;\\n      position: relative;\\n      direction: ltr;\\n      transition: opacity 0.3s ease-in-out;\\n    }\\n\\n    .counter-item {\\n      height: inherit;\\n      width: 51px;\\n      display: inline-block;\\n      vertical-align: text-top;\\n      position: relative;\\n    }\\n  }\\n\\n  .#{$prefix}time-h:after {\\n    position: absolute;\\n    top: 50%;\\n    right: 0;\\n    content: \':\';\\n    font-size: 70px;\\n    transform: translate(50%, -50%);\\n    transition: inherit;\\n  }\\n\\n  .up-arrow-btn,\\n  .down-arrow-btn {\\n    display: block;\\n    cursor: pointer;\\n    outline: none;\\n    height: 34px;\\n\\n    &:active svg path {\\n    }\\n  }\\n\\n  &.disabled .counter-item {\\n    opacity: 0.5;\\n  }\\n}\\n\\n.#{$prefix}prev-step {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 30px;\\n  height: 30px;\\n  text-align: center;\\n  padding: 9px;\\n  cursor: pointer;\\n\\n  &:hover {\\n    background-color: rgba(0, 0, 0, 0.2);\\n  }\\n}\\n\\n[data-type=\\"time\\"] {\\n  .#{$prefix}time {\\n    .#{$prefix}time-m,\\n    .#{$prefix}time-h {\\n      margin-top: 40px;\\n    }\\n  }\\n}\\n\\n.#{$prefix}is-inline {\\n  position: static;\\n  background-color: transparent;\\n  height: auto;\\n  width: auto;\\n  display: block;\\n  margin-top: 2px;\\n\\n  .#{$prefix}container {\\n    position: static;\\n    transform: none;\\n  }\\n\\n  .#{$prefix}content {\\n    box-shadow: 0 0 1px -1px black;\\n  }\\n}\\n\\n.#{$prefix}no-footer {\\n  .#{$prefix}addon-list {\\n    bottom: 0;\\n    border-bottom: none;\\n  }\\n}\\n\\n@media screen and (max-height: 460px) {\\n  .#{$prefix}wrapper {\\n    overflow: auto;\\n    text-align: center;\\n\\n    .#{$prefix}container {\\n      position: relative;\\n      top: 0;\\n      left: 0;\\n      transform: none;\\n      display: inline-block;\\n      margin: 20px auto;\\n    }\\n  }\\n}\\n\\n.#{$prefix}locales {\\n  list-style-type: none;\\n  padding: 0;\\n  margin: 0;\\n  position: absolute;\\n  left: 14px;\\n  top: 12px;\\n  line-height: 24px;\\n  text-align: center;\\n  opacity: 0.7;\\n\\n  li {\\n    cursor: pointer;\\n\\n    &.active {\\n      display: none;\\n    }\\n  }\\n}\\n\\n.#{$prefix}dir-ltr {\\n  .#{$prefix}content,\\n  .#{$prefix}actions,\\n  .#{$prefix}addon-list-content {\\n    direction: ltr;\\n  }\\n\\n  .#{$prefix}content,\\n  .#{$prefix}actions {\\n    text-align: left;\\n    font-family: sans-serif;\\n  }\\n\\n  .#{$prefix}month-label {\\n    font-size: 90%\\n  }\\n\\n  .#{$prefix}addon-list-item,\\n  .#{$prefix}weekday,\\n  .#{$prefix}day {\\n    float: left;\\n  }\\n\\n  .#{$prefix}locales {\\n    left: auto;\\n    right: 14px;\\n  }\\n}\\n\\n.#{$prefix}dir-rtl {\\n  .#{$prefix}next,\\n  .#{$prefix}prev {\\n    transform: rotateY(180deg);\\n  }\\n\\n  .#{$prefix}next {\\n    float: left\\n  }\\n\\n  .#{$prefix}prev {\\n    float: right\\n  }\\n}\\n","$prefix: vpd-; //shorted to reduce the css size\\n$width: 316px;\\n\\n$day-size: 40px;\\n$month-label-height: 50px;\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///142\n')},314:function(module){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9WdWVEYXRldGltZUpzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///314\n')},354:function(module){"use strict";eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVnVlRGF0ZXRpbWVKcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzP2FmMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///354\n')},243:function(module,exports,__webpack_require__){"use strict";eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment-hijri.js\n// author: Suhail Alkowaileet\n// This is a modified version of moment-jalaali by Behrang Noruzi Niya\n// license: MIT\n\n\n\n/************************************\n    Expose Moment Hijri\n************************************/\n(function (root, factory) {\n\t/* global define */\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(93)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (moment) {\n\t\t\troot.moment = factory(moment)\n\t\t\treturn root.moment\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n\t} else {}\n})(this, function (moment) { // jshint ignore:line\n\n\tif (moment == null) {\n\t\tthrow new Error('Cannot find moment')\n\t}\n\n\t/************************************\n      Constants\n  ************************************/\n\n\tvar ummalqura = {\n\t\tummalquraData: [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167,\n                      29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759,\n                      29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348,\n                      30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939,\n                      30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530,\n                      31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120,\n                      32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711,\n                      32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302,\n                      33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893,\n                      33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483,\n                      34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074,\n                      35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665,\n                      35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254,\n                      36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845,\n                      36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436,\n                      37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027,\n                      38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617,\n                      38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208,\n                      39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798,\n                      39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389,\n                      40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980,\n                      41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570,\n                      41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161,\n                      42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751,\n                      42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342,\n                      43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932,\n                      43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523,\n                      44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114,\n                      45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704,\n                      45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295,\n                      46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885,\n                      46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476,\n                      47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066,\n                      48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657,\n                      48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248,\n                      49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838,\n                      49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429,\n                      50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019,\n                      51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611,\n                      51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200,\n                      52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792,\n                      52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383,\n                      53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973,\n                      54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564,\n                      54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154,\n                      55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745,\n                      55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335,\n                      56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926,\n                      56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517,\n                      57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107,\n                      58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698,\n                      58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288,\n                      59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879,\n                      59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469,\n                      60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061,\n                      61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651,\n                      61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242,\n                      62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832,\n                      62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423,\n                      63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014,\n                      64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603,\n                      64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195,\n                      65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785,\n                      65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376,\n                      66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967,\n                      66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557,\n                      67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148,\n                      68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738,\n                      68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330,\n                      69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919,\n                      69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510,\n                      70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101,\n                      71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691,\n                      71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282,\n                      72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872,\n                      72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464,\n                      73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053,\n                      74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645,\n                      74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235,\n                      75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826,\n                      75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416,\n                      76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007,\n                      77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598,\n                      77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188,\n                      78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779,\n                      78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369,\n                      79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960,\n                      79990]\n\t}\n\n\tvar formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?i(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?)|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,\n\t\tlocalFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g\n\n\t, parseTokenOneOrTwoDigits = /\\d\\d?/, parseTokenOneToThreeDigits = /\\d{1,3}/, parseTokenThreeDigits = /\\d{3}/, parseTokenFourDigits = /\\d{1,4}/, parseTokenSixDigits = /[+\\-]?\\d{1,6}/, parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.?)|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, parseTokenT = /T/i, parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/\n\n\t, unitAliases = {\n\t\thd: 'idate',\n\t\thm: 'imonth',\n\t\thy: 'iyear'\n\t}\n\n\t, formatFunctions = {}\n\n\t, ordinalizeTokens = 'DDD w M D'.split(' '), paddedTokens = 'M D w'.split(' ')\n\n\t, formatTokenFunctions = {\n\t\tiM: function () {\n\t\t\treturn this.iMonth() + 1\n\t\t},\n\t\tiMMM: function (format) {\n\t\t\treturn this.localeData().iMonthsShort(this, format)\n\t\t},\n\t\tiMMMM: function (format) {\n\t\t\treturn this.localeData().iMonths(this, format)\n\t\t},\n\t\tiD: function () {\n\t\t\treturn this.iDate()\n\t\t},\n\t\tiDDD: function () {\n\t\t\treturn this.iDayOfYear()\n\t\t},\n\t\tiw: function () {\n\t\t\treturn this.iWeek()\n\t\t},\n\t\tiYY: function () {\n\t\t\treturn leftZeroFill(this.iYear() % 100, 2)\n\t\t},\n\t\tiYYYY: function () {\n\t\t\treturn leftZeroFill(this.iYear(), 4)\n\t\t},\n\t\tiYYYYY: function () {\n\t\t\treturn leftZeroFill(this.iYear(), 5)\n\t\t},\n\t\tigg: function () {\n\t\t\treturn leftZeroFill(this.iWeekYear() % 100, 2)\n\t\t},\n\t\tigggg: function () {\n\t\t\treturn this.iWeekYear()\n\t\t},\n\t\tiggggg: function () {\n\t\t\treturn leftZeroFill(this.iWeekYear(), 5)\n\t\t}\n\t}, i\n\n\tfunction padToken(func, count) {\n\t\treturn function (a) {\n\t\t\treturn leftZeroFill(func.call(this, a), count)\n\t\t}\n\t}\n\n\tfunction ordinalizeToken(func, period) {\n\t\treturn function (a) {\n\t\t\treturn this.localeData().ordinal(func.call(this, a), period)\n\t\t}\n\t}\n\n\twhile (ordinalizeTokens.length) {\n\t\ti = ordinalizeTokens.pop()\n\t\tformatTokenFunctions['i' + i + 'o'] = ordinalizeToken(formatTokenFunctions['i' + i], i)\n\t}\n\twhile (paddedTokens.length) {\n\t\ti = paddedTokens.pop()\n\t\tformatTokenFunctions['i' + i + i] = padToken(formatTokenFunctions['i' + i], 2)\n\t}\n\tformatTokenFunctions.iDDDD = padToken(formatTokenFunctions.iDDD, 3)\n\n\t/************************************\n      Helpers\n  ************************************/\n\n\tfunction extend(a, b) {\n\t\tvar key\n\t\tfor (key in b)\n\t\t\tif (b.hasOwnProperty(key))\n\t\t\t\ta[key] = b[key]\n\t\treturn a\n\t}\n\n\tfunction leftZeroFill(number, targetLength) {\n\t\tvar output = number + ''\n\t\twhile (output.length < targetLength)\n\t\t\toutput = '0' + output\n\t\treturn output\n\t}\n\n\tfunction isArray(input) {\n\t\treturn Object.prototype.toString.call(input) === '[object Array]'\n\t}\n\n\tfunction normalizeUnits(units) {\n\t\treturn units ? unitAliases[units] || units.toLowerCase().replace(/(.)s$/, '$1') : units\n\t}\n\n\tfunction setDate(moment, year, month, date) {\n\t\tvar utc = moment._isUTC ? 'UTC' : ''\n\t\tmoment._d['set' + utc + 'FullYear'](year)\n\t\tmoment._d['set' + utc + 'Month'](month)\n\t\tmoment._d['set' + utc + 'Date'](date)\n\t}\n\n\tfunction objectCreate(parent) {\n\t\tfunction F() {}\n\t\tF.prototype = parent\n\t\treturn new F()\n\t}\n\n\tfunction getPrototypeOf(object) {\n\t\tif (Object.getPrototypeOf)\n\t\t\treturn Object.getPrototypeOf(object)\n\t\telse if (''.__proto__) // jshint ignore:line\n\t\t\treturn object.__proto__ // jshint ignore:line\n\t\telse\n\t\t\treturn object.constructor.prototype\n\t}\n\n\t/************************************\n      Languages\n  ************************************/\n\textend(getPrototypeOf(moment.localeData()), {\n\t\t_iMonths: ['Muharram'\n                , 'Safar'\n                , 'Rabi\\' al-Awwal'\n                , 'Rabi\\' al-Thani'\n                , 'Jumada al-Ula'\n                , 'Jumada al-Alkhirah'\n                , 'Rajab'\n                , 'Sha’ban'\n                , 'Ramadhan'\n                , 'Shawwal'\n                , 'Thul-Qi’dah'\n                , 'Thul-Hijjah'\n                ],\n\t\tiMonths: function (m) {\n\t\t\treturn this._iMonths[m.iMonth()]\n\t\t}\n\n\t\t,\n\t\t_iMonthsShort: ['Muh'\n                      , 'Saf'\n                      , 'Rab-I'\n                      , 'Rab-II'\n                      , 'Jum-I'\n                      , 'Jum-II'\n                      , 'Raj'\n                      , 'Sha'\n                      , 'Ram'\n                      , 'Shw'\n                      , 'Dhu-Q'\n                      , 'Dhu-H'\n                      ],\n\t\tiMonthsShort: function (m) {\n\t\t\treturn this._iMonthsShort[m.iMonth()]\n\t\t}\n\n\t\t,\n\t\tiMonthsParse: function (monthName) {\n\t\t\tvar i, mom, regex\n\t\t\tif (!this._iMonthsParse)\n\t\t\t\tthis._iMonthsParse = []\n\t\t\tfor (i = 0; i < 12; i += 1) {\n\t\t\t\t// Make the regex if we don't have it already.\n\t\t\t\tif (!this._iMonthsParse[i]) {\n\t\t\t\t\tmom = hMoment([2000, (2 + i) % 12, 25])\n\t\t\t\t\tregex = '^' + this.iMonths(mom, '') + '$|^' + this.iMonthsShort(mom, '') + '$'\n\t\t\t\t\tthis._iMonthsParse[i] = new RegExp(regex.replace('.', ''), 'i')\n\t\t\t\t}\n\t\t\t\t// Test the regex.\n\t\t\t\tif (this._iMonthsParse[i].test(monthName))\n\t\t\t\t\treturn i\n\t\t\t}\n\t\t}\n\t});\n\tvar iMonthNames = {\n\t\tiMonths: 'محرم_صفر_ربيع الأول_ربيع الثاني_جمادى الأولى_جمادى الآخرة_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_'),\n\t\tiMonthsShort: 'محرم_صفر_ربيع ١_ربيع ٢_جمادى ١_جمادى ٢_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_')\n\t};\n\n\t// Default to the momentjs 2.12+ API\n\tif (typeof moment.updateLocale === 'function') {\n\t\tmoment.updateLocale('ar-sa', iMonthNames);\n\t} else {\n\t\tvar oldLocale = moment.locale();\n\t\tmoment.defineLocale('ar-sa', iMonthNames);\n\t\tmoment.locale(oldLocale);\n\t}\n\n\t/************************************\n      Formatting\n  ************************************/\n\n\tfunction makeFormatFunction(format) {\n\t\tvar array = format.match(formattingTokens),\n\t\t\tlength = array.length,\n\t\t\ti\n\n\t\tfor (i = 0; i < length; i += 1)\n\t\t\tif (formatTokenFunctions[array[i]])\n\t\t\t\tarray[i] = formatTokenFunctions[array[i]]\n\n\t\treturn function (mom) {\n\t\t\tvar output = ''\n\t\t\tfor (i = 0; i < length; i += 1)\n\t\t\t\toutput += array[i] instanceof Function ? '[' + array[i].call(mom, format) + ']' : array[i]\n\t\t\treturn output\n\t\t}\n\t}\n\n\t/************************************\n      Parsing\n  ************************************/\n\n\tfunction getParseRegexForToken(token, config) {\n\t\tswitch (token) {\n\t\tcase 'iDDDD':\n\t\t\treturn parseTokenThreeDigits\n\t\tcase 'iYYYY':\n\t\t\treturn parseTokenFourDigits\n\t\tcase 'iYYYYY':\n\t\t\treturn parseTokenSixDigits\n\t\tcase 'iDDD':\n\t\t\treturn parseTokenOneToThreeDigits\n\t\tcase 'iMMM':\n\t\tcase 'iMMMM':\n\t\t\treturn parseTokenWord\n\t\tcase 'iMM':\n\t\tcase 'iDD':\n\t\tcase 'iYY':\n\t\tcase 'iM':\n\t\tcase 'iD':\n\t\t\treturn parseTokenOneOrTwoDigits\n\t\tcase 'DDDD':\n\t\t\treturn parseTokenThreeDigits\n\t\tcase 'YYYY':\n\t\t\treturn parseTokenFourDigits\n\t\tcase 'YYYYY':\n\t\t\treturn parseTokenSixDigits\n\t\tcase 'S':\n\t\tcase 'SS':\n\t\tcase 'SSS':\n\t\tcase 'DDD':\n\t\t\treturn parseTokenOneToThreeDigits\n\t\tcase 'MMM':\n\t\tcase 'MMMM':\n\t\tcase 'dd':\n\t\tcase 'ddd':\n\t\tcase 'dddd':\n\t\t\treturn parseTokenWord\n\t\tcase 'a':\n\t\tcase 'A':\n\t\t\treturn moment.localeData(config._l)._meridiemParse\n\t\tcase 'X':\n\t\t\treturn parseTokenTimestampMs\n\t\tcase 'Z':\n\t\tcase 'ZZ':\n\t\t\treturn parseTokenTimezone\n\t\tcase 'T':\n\t\t\treturn parseTokenT\n\t\tcase 'MM':\n\t\tcase 'DD':\n\t\tcase 'YY':\n\t\tcase 'HH':\n\t\tcase 'hh':\n\t\tcase 'mm':\n\t\tcase 'ss':\n\t\tcase 'M':\n\t\tcase 'D':\n\t\tcase 'd':\n\t\tcase 'H':\n\t\tcase 'h':\n\t\tcase 'm':\n\t\tcase 's':\n\t\t\treturn parseTokenOneOrTwoDigits\n\t\tdefault:\n\t\t\treturn new RegExp(token.replace('\\\\', ''))\n\t\t}\n\t}\n\n\tfunction addTimeToArrayFromToken(token, input, config) {\n\t\tvar a, datePartArray = config._a\n\n\t\tswitch (token) {\n\t\tcase 'iM':\n\t\tcase 'iMM':\n\t\t\tdatePartArray[1] = input == null ? 0 : ~~input - 1\n\t\t\tbreak\n\t\tcase 'iMMM':\n\t\tcase 'iMMMM':\n\t\t\ta = moment.localeData(config._l).iMonthsParse(input)\n\t\t\tif (a != null)\n\t\t\t\tdatePartArray[1] = a\n\t\t\telse\n\t\t\t\tconfig._isValid = false\n\t\t\tbreak\n\t\tcase 'iD':\n\t\tcase 'iDD':\n\t\tcase 'iDDD':\n\t\tcase 'iDDDD':\n\t\t\tif (input != null)\n\t\t\t\tdatePartArray[2] = ~~input\n\t\t\tbreak\n\t\tcase 'iYY':\n\t\t\tdatePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400)\n\t\t\tbreak\n\t\tcase 'iYYYY':\n\t\tcase 'iYYYYY':\n\t\t\tdatePartArray[0] = ~~input\n\t\t}\n\t\tif (input == null)\n\t\t\tconfig._isValid = false\n\t}\n\n\tfunction dateFromArray(config) {\n\t\tvar g, h, hy = config._a[0],\n\t\t\thm = config._a[1],\n\t\t\thd = config._a[2]\n\n\t\tif ((hy == null) && (hm == null) && (hd == null))\n\t\t\treturn [0, 0, 1]\n\t\thy = hy || 0\n\t\thm = hm || 0\n\t\thd = hd || 1\n\t\tif (hd < 1 || hd > hMoment.iDaysInMonth(hy, hm))\n\t\t\tconfig._isValid = false\n\t\tg = toGregorian(hy, hm, hd)\n\t\th = toHijri(g.gy, g.gm, g.gd)\n\t\tconfig._hDiff = 0\n\t\tif (~~h.hy !== hy)\n\t\t\tconfig._hDiff += 1\n\t\tif (~~h.hm !== hm)\n\t\t\tconfig._hDiff += 1\n\t\tif (~~h.hd !== hd)\n\t\t\tconfig._hDiff += 1\n\t\treturn [g.gy, g.gm, g.gd]\n\t}\n\n\tfunction makeDateFromStringAndFormat(config) {\n\t\tvar tokens = config._f.match(formattingTokens),\n\t\t\tstring = config._i,\n\t\t\tlen = tokens.length,\n\t\t\ti, token, parsedInput\n\n\t\tconfig._a = []\n\n\t\tfor (i = 0; i < len; i += 1) {\n\t\t\ttoken = tokens[i]\n\t\t\tparsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];\n\t\t\tif (parsedInput)\n\t\t\t\tstring = string.slice(string.indexOf(parsedInput) + parsedInput.length)\n\t\t\tif (formatTokenFunctions[token])\n\t\t\t\taddTimeToArrayFromToken(token, parsedInput, config)\n\t\t}\n\t\tif (string)\n\t\t\tconfig._il = string\n\n\t\treturn dateFromArray(config)\n\t}\n\n\tfunction makeDateFromStringAndArray(config, utc) {\n\t\tvar len = config._f.length\n\t\t, i\n\t\t, format\n\t\t, tempMoment\n\t\t, bestMoment\n\t\t, currentScore\n\t\t, scoreToBeat\n\n\t\tif (len === 0) {\n\t\t\treturn makeMoment(new Date(NaN))\n\t\t}\n\n\t\tfor (i = 0; i < len; i += 1) {\n\t\t\tformat = config._f[i]\n\t\t\tcurrentScore = 0\n\t\t\ttempMoment = makeMoment(config._i, format, config._l, utc)\n\n\t\t\tif (!tempMoment.isValid()) continue\n\n\t\t\tcurrentScore += tempMoment._hDiff\n\t\t\tif (tempMoment._il)\n\t\t\t\tcurrentScore += tempMoment._il.length\n\t\t\tif (scoreToBeat == null || currentScore < scoreToBeat) {\n\t\t\t\tscoreToBeat = currentScore\n\t\t\t\tbestMoment = tempMoment\n\t\t\t}\n\t\t}\n\n\t\treturn bestMoment\n\t}\n\n\tfunction removeParsedTokens(config) {\n\t\tvar string = config._i,\n\t\t\tinput = '',\n\t\t\tformat = '',\n\t\t\tarray = config._f.match(formattingTokens),\n\t\t\tlen = array.length,\n\t\t\ti, match, parsed\n\n\t\tfor (i = 0; i < len; i += 1) {\n\t\t\tmatch = array[i]\n\t\t\tparsed = (getParseRegexForToken(match, config).exec(string) || [])[0]\n\t\t\tif (parsed)\n\t\t\t\tstring = string.slice(string.indexOf(parsed) + parsed.length)\n\t\t\tif (!(formatTokenFunctions[match] instanceof Function)) {\n\t\t\t\tformat += match\n\t\t\t\tif (parsed)\n\t\t\t\t\tinput += parsed\n\t\t\t}\n\t\t}\n\t\tconfig._i = input\n\t\tconfig._f = format\n\t}\n\n\t/************************************\n      Week of Year\n  ************************************/\n\n\tfunction iWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n\t\tvar end = firstDayOfWeekOfYear - firstDayOfWeek,\n\t\t\tdaysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\n\t\t\tadjustedMoment\n\n\t\tif (daysToDayOfWeek > end) {\n\t\t\tdaysToDayOfWeek -= 7\n\t\t}\n\t\tif (daysToDayOfWeek < end - 7) {\n\t\t\tdaysToDayOfWeek += 7\n\t\t}\n\t\tadjustedMoment = hMoment(mom).add(daysToDayOfWeek, 'd')\n\t\treturn {\n\t\t\tweek: Math.ceil(adjustedMoment.iDayOfYear() / 7),\n\t\t\tyear: adjustedMoment.iYear()\n\t\t}\n\t}\n\n\t/************************************\n      Top Level Functions\n  ************************************/\n\n\tfunction makeMoment(input, format, lang, utc) {\n\t\tvar config =\n\t\t\t{ _i: input\n\t\t\t, _f: format\n\t\t\t, _l: lang\n\t\t\t}\n\t\t\t, date\n\t\t\t, m\n\t\t\t, hm\n\t\tif (format) {\n\t\t\tif (isArray(format)) {\n\t\t\t\treturn makeDateFromStringAndArray(config, utc)\n\t\t\t} else {\n\t\t\t\tdate = makeDateFromStringAndFormat(config)\n\t\t\t\tremoveParsedTokens(config)\n\t\t\t\tformat = 'YYYY-MM-DD-' + config._f\n\t\t\t\tinput = leftZeroFill(date[0], 4) + '-'\n\t\t\t\t\t+ leftZeroFill(date[1] + 1, 2) + '-'\n\t\t\t\t\t+ leftZeroFill(date[2], 2) + '-'\n\t\t\t\t\t+ config._i\n\t\t\t}\n\t\t}\n\t\tif (utc)\n\t\t\tm = moment.utc(input, format, lang)\n\t\telse\n\t\t\tm = moment(input, format, lang)\n\t\tif (config._isValid === false)\n\t\t\tm._isValid = false\n\t\tm._hDiff = config._hDiff || 0\n\t\thm = objectCreate(hMoment.fn)\n\t\textend(hm, m)\n\t\treturn hm\n\t}\n\n\tfunction hMoment(input, format, lang) {\n\t\treturn makeMoment(input, format, lang, false)\n\t}\n\n\textend(hMoment, moment)\n\thMoment.fn = objectCreate(moment.fn)\n\n\thMoment.utc = function (input, format, lang) {\n\t\treturn makeMoment(input, format, lang, true)\n\t}\n\n\t/************************************\n      hMoment Prototype\n  ************************************/\n\n\thMoment.fn.format = function (format) {\n\t\tvar i, replace, me = this\n\n\t\tif (format) {\n\t\t\ti = 5\n\t\t\treplace = function (input) {\n\t\t\t\treturn me.localeData().longDateFormat(input) || input\n\t\t\t}\n\t\t\twhile (i > 0 && localFormattingTokens.test(format)) {\n\t\t\t\ti -= 1\n\t\t\t\tformat = format.replace(localFormattingTokens, replace)\n\t\t\t}\n\t\t\tif (!formatFunctions[format]) {\n\t\t\t\tformatFunctions[format] = makeFormatFunction(format)\n\t\t\t}\n\t\t\tformat = formatFunctions[format](this)\n\t\t}\n\t\treturn moment.fn.format.call(this, format)\n\t}\n\n\thMoment.fn.iYear = function (input) {\n\t\tvar lastDay, h, g\n\t\tif (typeof input === 'number') {\n\t\t\th = toHijri(this.year(), this.month(), this.date())\n\t\t\tlastDay = Math.min(h.hd, hMoment.iDaysInMonth(input, h.hm))\n\t\t\tg = toGregorian(input, h.hm, lastDay)\n\t\t\tsetDate(this, g.gy, g.gm, g.gd)\n\t\t\t//Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n\t\t\tif (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\n\t\t\t\tsetDate(this, g.gy, g.gm, g.gd)\n\t\t\t}\n\t\t\tmoment.updateOffset(this)\n\t\t\treturn this\n\t\t} else {\n\t\t\treturn toHijri(this.year(), this.month(), this.date()).hy\n\t\t}\n\t}\n\n\thMoment.fn.iMonth = function (input) {\n\t\tvar lastDay, h, g\n\t\tif (input != null) {\n\t\t\tif (typeof input === 'string') {\n\t\t\t\tinput = this.localeData().iMonthsParse(input)\n\t\t\t\tif(input >= 0) {\n\t\t\t\t\tinput -= 1\n\t\t\t\t} else {\n\t\t\t\t\treturn this\n\t\t\t\t}\n\t\t\t}\n\t\t\th = toHijri(this.year(), this.month(), this.date())\n\t\t\tlastDay = Math.min(h.hd, hMoment.iDaysInMonth(h.hy, input))\n\t\t\tthis.iYear(h.hy + div(input, 12))\n\t\t\tinput = mod(input, 12)\n\t\t\tif (input < 0) {\n\t\t\t\tinput += 12\n\t\t\t\tthis.iYear(this.iYear() - 1)\n\t\t\t}\n\t\t\tg = toGregorian(this.iYear(), input, lastDay)\n\t\t\tsetDate(this, g.gy, g.gm, g.gd)\n\t\t\t//Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n\t\t\tif (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\n\t\t\t\tsetDate(this, g.gy, g.gm, g.gd)\n\t\t\t}\n\t\t\tmoment.updateOffset(this)\n\t\t\treturn this\n\t\t} else {\n\t\t\treturn toHijri(this.year(), this.month(), this.date()).hm\n\t\t}\n\t}\n\n\thMoment.fn.iDate = function (input) {\n\t\tvar h, g\n\t\tif (typeof input === 'number') {\n\t\t\th = toHijri(this.year(), this.month(), this.date())\n\t\t\tg = toGregorian(h.hy, h.hm, input)\n\t\t\tsetDate(this, g.gy, g.gm, g.gd)\n\t\t\t//Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n\t\t\tif (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\n\t\t\t\tsetDate(this, g.gy, g.gm, g.gd)\n\t\t\t}\n\t\t\tmoment.updateOffset(this)\n\t\t\treturn this\n\t\t} else {\n\t\t\treturn toHijri(this.year(), this.month(), this.date()).hd\n\t\t}\n\t}\n\n\thMoment.fn.iDayOfYear = function (input) {\n\t\tvar dayOfYear = Math.round((hMoment(this).startOf('day') - hMoment(this).startOf('iYear')) / 864e5) + 1\n\t\treturn input == null ? dayOfYear : this.add(input - dayOfYear, 'd')\n\t}\n\n\thMoment.fn.iDaysInMonth = function () {\n\t\treturn parseInt(hMoment(this).endOf('iMonth').format('iDD'));\n\t}\n\n\thMoment.fn.iWeek = function (input) {\n\t\tvar week = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week\n\t\treturn input == null ? week : this.add( (input - week) * 7, 'd')\n\t}\n\n\thMoment.fn.iWeekYear = function (input) {\n\t\tvar year = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year\n\t\treturn input == null ? year : this.add(input - year, 'y')\n\t}\n\n\thMoment.fn.add = function (val, units) {\n\t\tvar temp\n\t\tif (units !== null && !isNaN(+units)) {\n\t\t\ttemp = val\n\t\t\tval = units\n\t\t\tunits = temp\n\t\t}\n\t\tunits = normalizeUnits(units)\n\t\tif (units === 'iyear') {\n\t\t\tthis.iYear(this.iYear() + val)\n\t\t} else if (units === 'imonth') {\n\t\t\tthis.iMonth(this.iMonth() + val)\n\t\t} else if (units === 'idate') {\n\t\t\tthis.iDate(this.iDate() + val)\n\t\t}\n\t\t else {\n\t\t\tmoment.fn.add.call(this, val, units)\n\t\t}\n\t\treturn this\n\t}\n\n\thMoment.fn.subtract = function (val, units) {\n\t\tvar temp\n\t\tif (units !== null && !isNaN(+units)) {\n\t\t\ttemp = val\n\t\t\tval = units\n\t\t\tunits = temp\n\t\t}\n\t\tunits = normalizeUnits(units)\n\t\tif (units === 'iyear') {\n\t\t\tthis.iYear(this.iYear() - val)\n\t\t} else if (units === 'imonth') {\n\t\t\tthis.iMonth(this.iMonth() - val)\n\t\t} else if (units === 'idate') {\n\t\t\tthis.iDate(this.iDate() - val)\n\t\t} else {\n\t\t\tmoment.fn.subtract.call(this, val, units)\n\t\t}\n\t\treturn this\n\t}\n\n\thMoment.fn.startOf = function (units) {\n\t\tunits = normalizeUnits(units)\n\t\tif (units === 'iyear' || units === 'imonth') {\n\t\t\tif (units === 'iyear') {\n\t\t\t\tthis.iMonth(0)\n\t\t\t}\n\t\t\tthis.iDate(1)\n\t\t\tthis.hours(0)\n\t\t\tthis.minutes(0)\n\t\t\tthis.seconds(0)\n\t\t\tthis.milliseconds(0)\n\t\t\treturn this\n\t\t} else {\n\t\t\treturn moment.fn.startOf.call(this, units)\n\t\t}\n\t}\n\n\thMoment.fn.endOf = function (units) {\n\t\tunits = normalizeUnits(units)\n\t\tif (units === undefined || units === 'milisecond') {\n\t\t\treturn this\n\t\t}\n\t\treturn this.startOf(units).add(1, (units === 'isoweek' ? 'week' : units)).subtract(1, 'milliseconds')\n\t}\n\n\thMoment.fn.clone = function () {\n\t\treturn hMoment(this)\n\t}\n\n\thMoment.fn.iYears = hMoment.fn.iYear\n\thMoment.fn.iMonths = hMoment.fn.iMonth\n\thMoment.fn.iDates = hMoment.fn.iDate\n\thMoment.fn.iWeeks = hMoment.fn.iWeek\n\n\t/************************************\n      hMoment Statics\n  ************************************/\n\n\thMoment.iDaysInMonth = function (year, month) {\n\t\tvar i = getNewMoonMJDNIndex(year, month + 1),\n\t\t\tdaysInMonth = ummalqura.ummalquraData[i] - ummalqura.ummalquraData[i - 1]\n\t\treturn daysInMonth\n\t}\n\n\tfunction toHijri(gy, gm, gd) {\n\t\tvar h = d2h(g2d(gy, gm + 1, gd))\n\t\th.hm -= 1\n\t\treturn h\n\t}\n\n\tfunction toGregorian(hy, hm, hd) {\n\t\tvar g = d2g(h2d(hy, hm + 1, hd))\n\t\tg.gm -= 1\n\t\treturn g\n\t}\n\n\thMoment.iConvert = {\n\t\ttoHijri: toHijri,\n\t\ttoGregorian: toGregorian\n\t}\n\n\treturn hMoment\n\n\t/************************************\n      Hijri Conversion\n  ************************************/\n\n\t/*\n    Utility helper functions.\n  */\n\n\tfunction div(a, b) {\n\t\treturn~~ (a / b)\n\t}\n\n\tfunction mod(a, b) {\n\t\treturn a - ~~(a / b) * b\n\t}\n\n\t/*\n    Converts a date of the Hijri calendar to the Julian Day number.\n\n    @param hy Hijri year (1356 to 1500)\n    @param hm Hijri month (1 to 12)\n    @param hd Hijri day (1 to 29/30)\n    @return Julian Day number\n  */\n\n\tfunction h2d(hy, hm, hd) {\n\t\tvar i = getNewMoonMJDNIndex(hy, hm),\n\t\t\tmjdn = hd + ummalqura.ummalquraData[i - 1] - 1,\n\t\t\tjdn = mjdn + 2400000;\n\t\treturn jdn\n\t}\n\n\t/*\n    Converts the Julian Day number to a date in the Hijri calendar.\n\n    @param jdn Julian Day number\n    @return\n      hy: Hijri year (1356 to 1500)\n      hm: Hijri month (1 to 12)\n      hd: Hijri day (1 to 29/30)\n  */\n\n\tfunction d2h(jdn) {\n\t\tvar mjdn = jdn - 2400000,\n\t\t\ti = getNewMoonMJDNIndexByJDN(mjdn),\n\t\t\ttotalMonths = i + 16260,\n\t\t\tcYears = Math.floor((totalMonths - 1) / 12),\n\t\t\thy = cYears + 1,\n\t\t\thm = totalMonths - 12 * cYears,\n\t\t\thd = mjdn - ummalqura.ummalquraData[i - 1] + 1\n\n\t\treturn {\n\t\t\thy: hy,\n\t\t\thm: hm,\n\t\t\thd: hd\n\t\t}\n\t}\n\n\t/*\n    Calculates the Julian Day number from Gregorian or Julian\n    calendar dates. This integer number corresponds to the noon of\n    the date (i.e. 12 hours of Universal Time).\n    The procedure was tested to be good since 1 March, -100100 (of both\n    calendars) up to a few million years into the future.\n\n    @param gy Calendar year (years BC numbered 0, -1, -2, ...)\n    @param gm Calendar month (1 to 12)\n    @param gd Calendar day of the month (1 to 28/29/30/31)\n    @return Julian Day number\n  */\n\n\tfunction g2d(gy, gm, gd) {\n\t\tvar d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408\n\t\td = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752\n\t\treturn d\n\t}\n\n\t/*\n    Calculates Gregorian and Julian calendar dates from the Julian Day number\n    (hdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\n    calendars) to some millions years ahead of the present.\n\n    @param jdn Julian Day number\n    @return\n      gy: Calendar year (years BC numbered 0, -1, -2, ...)\n      gm: Calendar month (1 to 12)\n      gd: Calendar day of the month M (1 to 28/29/30/31)\n  */\n\n\tfunction d2g(jdn) {\n\t\tvar j, i, gd, gm, gy\n\t\tj = 4 * jdn + 139361631\n\t\tj = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908\n\t\ti = div(mod(j, 1461), 4) * 5 + 308\n\t\tgd = div(mod(i, 153), 5) + 1\n\t\tgm = mod(div(i, 153), 12) + 1\n\t\tgy = div(j, 1461) - 100100 + div(8 - gm, 6)\n\t\treturn {\n\t\t\tgy: gy,\n\t\t\tgm: gm,\n\t\t\tgd: gd\n\t\t}\n\t}\n\n\t/*\n    Returns the index of the modified Julian day number of the new moon\n    by the given year and month\n\n    @param hy: Hijri year (1356 to 1500)\n    @param hm: Hijri month (1 to 12)\n    @return\n        i: the index of the new moon in modified Julian day number.\n  */\n\tfunction getNewMoonMJDNIndex(hy, hm) {\n\t\tvar cYears = hy - 1,\n\t\t\ttotalMonths = (cYears * 12) + 1 + (hm - 1),\n\t\t\ti = totalMonths - 16260\n\t\treturn i\n\t}\n\n\t/*\n    Returns the nearest new moon\n\n    @param jdn Julian Day number\n    @return\n      i: the index of a modified Julian day number.\n  */\n\tfunction getNewMoonMJDNIndexByJDN(mjdn) {\n\t\tfor (var i = 0; i < ummalqura.ummalquraData.length; i=i+1) {\n\t\t\tif (ummalqura.ummalquraData[i] > mjdn)\n\t\t\t\treturn i\n\t\t}\n\t}\n\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///243\n")},93:function(module,__unused_webpack_exports,__webpack_require__){eval("/* module decorator */ module = __webpack_require__.nmd(module);\n//! moment.js\n//! version : 2.30.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n     true ? module.exports = factory() :\n    0\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks() {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback(callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return (\n            input instanceof Array ||\n            Object.prototype.toString.call(input) === '[object Array]'\n        );\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return (\n            input != null &&\n            Object.prototype.toString.call(input) === '[object Object]'\n        );\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return Object.getOwnPropertyNames(obj).length === 0;\n        } else {\n            var k;\n            for (k in obj) {\n                if (hasOwnProp(obj, k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return (\n            typeof input === 'number' ||\n            Object.prototype.toString.call(input) === '[object Number]'\n        );\n    }\n\n    function isDate(input) {\n        return (\n            input instanceof Date ||\n            Object.prototype.toString.call(input) === '[object Date]'\n        );\n    }\n\n    function map(arr, fn) {\n        var res = [],\n            i,\n            arrLen = arr.length;\n        for (i = 0; i < arrLen; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty: false,\n            unusedTokens: [],\n            unusedInput: [],\n            overflow: -2,\n            charsLeftOver: 0,\n            nullInput: false,\n            invalidEra: null,\n            invalidMonth: null,\n            invalidFormat: false,\n            userInvalidated: false,\n            iso: false,\n            parsedDateParts: [],\n            era: null,\n            meridiem: null,\n            rfc2822: false,\n            weekdayMismatch: false,\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this),\n                len = t.length >>> 0,\n                i;\n\n            for (i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        var flags = null,\n            parsedParts = false,\n            isNowValid = m._d && !isNaN(m._d.getTime());\n        if (isNowValid) {\n            flags = getParsingFlags(m);\n            parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            isNowValid =\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidEra &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n            if (m._strict) {\n                isNowValid =\n                    isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n        }\n        if (Object.isFrozen == null || !Object.isFrozen(m)) {\n            m._isValid = isNowValid;\n        } else {\n            return isNowValid;\n        }\n        return m._isValid;\n    }\n\n    function createInvalid(flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        } else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = (hooks.momentProperties = []),\n        updateInProgress = false;\n\n    function copyConfig(to, from) {\n        var i,\n            prop,\n            val,\n            momentPropertiesLen = momentProperties.length;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentPropertiesLen > 0) {\n            for (i = 0; i < momentPropertiesLen; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment(obj) {\n        return (\n            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)\n        );\n    }\n\n    function warn(msg) {\n        if (\n            hooks.suppressDeprecationWarnings === false &&\n            typeof console !== 'undefined' &&\n            console.warn\n        ) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [],\n                    arg,\n                    i,\n                    key,\n                    argLen = arguments.length;\n                for (i = 0; i < argLen; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (key in arguments[0]) {\n                            if (hasOwnProp(arguments[0], key)) {\n                                arg += key + ': ' + arguments[0][key] + ', ';\n                            }\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(\n                    msg +\n                        '\\nArguments: ' +\n                        Array.prototype.slice.call(args).join('') +\n                        '\\n' +\n                        new Error().stack\n                );\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return (\n            (typeof Function !== 'undefined' && input instanceof Function) ||\n            Object.prototype.toString.call(input) === '[object Function]'\n        );\n    }\n\n    function set(config) {\n        var prop, i;\n        for (i in config) {\n            if (hasOwnProp(config, i)) {\n                prop = config[i];\n                if (isFunction(prop)) {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' +\n                /\\d{1,2}/.source\n        );\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig),\n            prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (\n                hasOwnProp(parentConfig, prop) &&\n                !hasOwnProp(childConfig, prop) &&\n                isObject(parentConfig[prop])\n            ) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i,\n                res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay: '[Today at] LT',\n        nextDay: '[Tomorrow at] LT',\n        nextWeek: 'dddd [at] LT',\n        lastDay: '[Yesterday at] LT',\n        lastWeek: '[Last] dddd [at] LT',\n        sameElse: 'L',\n    };\n\n    function calendar(key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (\n            (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +\n            absNumber\n        );\n    }\n\n    var formattingTokens =\n            /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n        formatFunctions = {},\n        formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken(token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(\n                    func.apply(this, arguments),\n                    token\n                );\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens),\n            i,\n            length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '',\n                i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i])\n                    ? array[i].call(mom, format)\n                    : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] =\n            formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(\n                localFormattingTokens,\n                replaceLongDateFormatTokens\n            );\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var defaultLongDateFormat = {\n        LTS: 'h:mm:ss A',\n        LT: 'h:mm A',\n        L: 'MM/DD/YYYY',\n        LL: 'MMMM D, YYYY',\n        LLL: 'MMMM D, YYYY h:mm A',\n        LLLL: 'dddd, MMMM D, YYYY h:mm A',\n    };\n\n    function longDateFormat(key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper\n            .match(formattingTokens)\n            .map(function (tok) {\n                if (\n                    tok === 'MMMM' ||\n                    tok === 'MM' ||\n                    tok === 'DD' ||\n                    tok === 'dddd'\n                ) {\n                    return tok.slice(1);\n                }\n                return tok;\n            })\n            .join('');\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate() {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d',\n        defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal(number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future: 'in %s',\n        past: '%s ago',\n        s: 'a few seconds',\n        ss: '%d seconds',\n        m: 'a minute',\n        mm: '%d minutes',\n        h: 'an hour',\n        hh: '%d hours',\n        d: 'a day',\n        dd: '%d days',\n        w: 'a week',\n        ww: '%d weeks',\n        M: 'a month',\n        MM: '%d months',\n        y: 'a year',\n        yy: '%d years',\n    };\n\n    function relativeTime(number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return isFunction(output)\n            ? output(number, withoutSuffix, string, isFuture)\n            : output.replace(/%d/i, number);\n    }\n\n    function pastFuture(diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {\n        D: 'date',\n        dates: 'date',\n        date: 'date',\n        d: 'day',\n        days: 'day',\n        day: 'day',\n        e: 'weekday',\n        weekdays: 'weekday',\n        weekday: 'weekday',\n        E: 'isoWeekday',\n        isoweekdays: 'isoWeekday',\n        isoweekday: 'isoWeekday',\n        DDD: 'dayOfYear',\n        dayofyears: 'dayOfYear',\n        dayofyear: 'dayOfYear',\n        h: 'hour',\n        hours: 'hour',\n        hour: 'hour',\n        ms: 'millisecond',\n        milliseconds: 'millisecond',\n        millisecond: 'millisecond',\n        m: 'minute',\n        minutes: 'minute',\n        minute: 'minute',\n        M: 'month',\n        months: 'month',\n        month: 'month',\n        Q: 'quarter',\n        quarters: 'quarter',\n        quarter: 'quarter',\n        s: 'second',\n        seconds: 'second',\n        second: 'second',\n        gg: 'weekYear',\n        weekyears: 'weekYear',\n        weekyear: 'weekYear',\n        GG: 'isoWeekYear',\n        isoweekyears: 'isoWeekYear',\n        isoweekyear: 'isoWeekYear',\n        w: 'week',\n        weeks: 'week',\n        week: 'week',\n        W: 'isoWeek',\n        isoweeks: 'isoWeek',\n        isoweek: 'isoWeek',\n        y: 'year',\n        years: 'year',\n        year: 'year',\n    };\n\n    function normalizeUnits(units) {\n        return typeof units === 'string'\n            ? aliases[units] || aliases[units.toLowerCase()]\n            : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {\n        date: 9,\n        day: 11,\n        weekday: 11,\n        isoWeekday: 11,\n        dayOfYear: 4,\n        hour: 13,\n        millisecond: 16,\n        minute: 14,\n        month: 8,\n        quarter: 7,\n        second: 15,\n        weekYear: 1,\n        isoWeekYear: 1,\n        week: 5,\n        isoWeek: 5,\n        year: 1,\n    };\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [],\n            u;\n        for (u in unitsObj) {\n            if (hasOwnProp(unitsObj, u)) {\n                units.push({ unit: u, priority: priorities[u] });\n            }\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    var match1 = /\\d/, //       0 - 9\n        match2 = /\\d\\d/, //      00 - 99\n        match3 = /\\d{3}/, //     000 - 999\n        match4 = /\\d{4}/, //    0000 - 9999\n        match6 = /[+-]?\\d{6}/, // -999999 - 999999\n        match1to2 = /\\d\\d?/, //       0 - 99\n        match3to4 = /\\d\\d\\d\\d?/, //     999 - 9999\n        match5to6 = /\\d\\d\\d\\d\\d\\d?/, //   99999 - 999999\n        match1to3 = /\\d{1,3}/, //       0 - 999\n        match1to4 = /\\d{1,4}/, //       0 - 9999\n        match1to6 = /[+-]?\\d{1,6}/, // -999999 - 999999\n        matchUnsigned = /\\d+/, //       0 - inf\n        matchSigned = /[+-]?\\d+/, //    -inf - inf\n        matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z\n        matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n        matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n        // any word (or two) characters or numbers including two/three word month in arabic.\n        // includes scottish gaelic two word and hyphenated months\n        matchWord =\n            /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i,\n        match1to2NoLeadingZero = /^[1-9]\\d?/, //         1-99\n        match1to2HasZero = /^([1-9]\\d|\\d)/, //           0-99\n        regexes;\n\n    regexes = {};\n\n    function addRegexToken(token, regex, strictRegex) {\n        regexes[token] = isFunction(regex)\n            ? regex\n            : function (isStrict, localeData) {\n                  return isStrict && strictRegex ? strictRegex : regex;\n              };\n    }\n\n    function getParseRegexForToken(token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(\n            s\n                .replace('\\\\', '')\n                .replace(\n                    /\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g,\n                    function (matched, p1, p2, p3, p4) {\n                        return p1 || p2 || p3 || p4;\n                    }\n                )\n        );\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    function absFloor(number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    var tokens = {};\n\n    function addParseToken(token, callback) {\n        var i,\n            func = callback,\n            tokenLen;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        tokenLen = token.length;\n        for (i = 0; i < tokenLen; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken(token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    var YEAR = 0,\n        MONTH = 1,\n        DATE = 2,\n        HOUR = 3,\n        MINUTE = 4,\n        SECOND = 5,\n        MILLISECOND = 6,\n        WEEK = 7,\n        WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? zeroFill(y, 4) : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY', 4], 0, 'year');\n    addFormatToken(0, ['YYYYY', 5], 0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // PARSING\n\n    addRegexToken('Y', matchSigned);\n    addRegexToken('YY', match1to2, match2);\n    addRegexToken('YYYY', match1to4, match4);\n    addRegexToken('YYYYY', match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] =\n            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear() {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet(unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get(mom, unit) {\n        if (!mom.isValid()) {\n            return NaN;\n        }\n\n        var d = mom._d,\n            isUTC = mom._isUTC;\n\n        switch (unit) {\n            case 'Milliseconds':\n                return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();\n            case 'Seconds':\n                return isUTC ? d.getUTCSeconds() : d.getSeconds();\n            case 'Minutes':\n                return isUTC ? d.getUTCMinutes() : d.getMinutes();\n            case 'Hours':\n                return isUTC ? d.getUTCHours() : d.getHours();\n            case 'Date':\n                return isUTC ? d.getUTCDate() : d.getDate();\n            case 'Day':\n                return isUTC ? d.getUTCDay() : d.getDay();\n            case 'Month':\n                return isUTC ? d.getUTCMonth() : d.getMonth();\n            case 'FullYear':\n                return isUTC ? d.getUTCFullYear() : d.getFullYear();\n            default:\n                return NaN; // Just in case\n        }\n    }\n\n    function set$1(mom, unit, value) {\n        var d, isUTC, year, month, date;\n\n        if (!mom.isValid() || isNaN(value)) {\n            return;\n        }\n\n        d = mom._d;\n        isUTC = mom._isUTC;\n\n        switch (unit) {\n            case 'Milliseconds':\n                return void (isUTC\n                    ? d.setUTCMilliseconds(value)\n                    : d.setMilliseconds(value));\n            case 'Seconds':\n                return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));\n            case 'Minutes':\n                return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));\n            case 'Hours':\n                return void (isUTC ? d.setUTCHours(value) : d.setHours(value));\n            case 'Date':\n                return void (isUTC ? d.setUTCDate(value) : d.setDate(value));\n            // case 'Day': // Not real\n            //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));\n            // case 'Month': // Not used because we need to pass two variables\n            //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));\n            case 'FullYear':\n                break; // See below ...\n            default:\n                return; // Just in case\n        }\n\n        year = value;\n        month = mom.month();\n        date = mom.date();\n        date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;\n        void (isUTC\n            ? d.setUTCFullYear(year, month, date)\n            : d.setFullYear(year, month, date));\n    }\n\n    // MOMENTS\n\n    function stringGet(units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n    function stringSet(units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units),\n                i,\n                prioritizedLen = prioritized.length;\n            for (i = 0; i < prioritizedLen; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1\n            ? isLeapYear(year)\n                ? 29\n                : 28\n            : 31 - ((modMonth % 7) % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // PARSING\n\n    addRegexToken('M', match1to2, match1to2NoLeadingZero);\n    addRegexToken('MM', match1to2, match2);\n    addRegexToken('MMM', function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var defaultLocaleMonths =\n            'January_February_March_April_May_June_July_August_September_October_November_December'.split(\n                '_'\n            ),\n        defaultLocaleMonthsShort =\n            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n        MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/,\n        defaultMonthsShortRegex = matchWord,\n        defaultMonthsRegex = matchWord;\n\n    function localeMonths(m, format) {\n        if (!m) {\n            return isArray(this._months)\n                ? this._months\n                : this._months['standalone'];\n        }\n        return isArray(this._months)\n            ? this._months[m.month()]\n            : this._months[\n                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)\n                      ? 'format'\n                      : 'standalone'\n              ][m.month()];\n    }\n\n    function localeMonthsShort(m, format) {\n        if (!m) {\n            return isArray(this._monthsShort)\n                ? this._monthsShort\n                : this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort)\n            ? this._monthsShort[m.month()]\n            : this._monthsShort[\n                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'\n              ][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse(monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp(\n                    '^' + this.months(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n                this._shortMonthsParse[i] = new RegExp(\n                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex =\n                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'MMMM' &&\n                this._longMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'MMM' &&\n                this._shortMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth(mom, value) {\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        var month = value,\n            date = mom.date();\n\n        date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));\n        void (mom._isUTC\n            ? mom._d.setUTCMonth(month, date)\n            : mom._d.setMonth(month, date));\n        return mom;\n    }\n\n    function getSetMonth(value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth() {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    function monthsShortRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict\n                ? this._monthsShortStrictRegex\n                : this._monthsShortRegex;\n        }\n    }\n\n    function monthsRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict\n                ? this._monthsStrictRegex\n                : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom,\n            shortP,\n            longP;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortP = regexEscape(this.monthsShort(mom, ''));\n            longP = regexEscape(this.months(mom, ''));\n            shortPieces.push(shortP);\n            longPieces.push(longP);\n            mixedPieces.push(longP);\n            mixedPieces.push(shortP);\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._monthsShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    function createDate(y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n\n        return date;\n    }\n\n    function createUTCDate(y) {\n        var date, args;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear,\n            resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear,\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek,\n            resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear,\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // PARSING\n\n    addRegexToken('w', match1to2, match1to2NoLeadingZero);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W', match1to2, match1to2NoLeadingZero);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(\n        ['w', 'ww', 'W', 'WW'],\n        function (input, week, config, token) {\n            week[token.substr(0, 1)] = toInt(input);\n        }\n    );\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek(mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow: 0, // Sunday is the first day of the week.\n        doy: 6, // The week that contains Jan 6th is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek() {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear() {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek(input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek(input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // PARSING\n\n    addRegexToken('d', match1to2);\n    addRegexToken('e', match1to2);\n    addRegexToken('E', match1to2);\n    addRegexToken('dd', function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd', function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd', function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n    function shiftWeekdays(ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n\n    var defaultLocaleWeekdays =\n            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n        defaultWeekdaysRegex = matchWord,\n        defaultWeekdaysShortRegex = matchWord,\n        defaultWeekdaysMinRegex = matchWord;\n\n    function localeWeekdays(m, format) {\n        var weekdays = isArray(this._weekdays)\n            ? this._weekdays\n            : this._weekdays[\n                  m && m !== true && this._weekdays.isFormat.test(format)\n                      ? 'format'\n                      : 'standalone'\n              ];\n        return m === true\n            ? shiftWeekdays(weekdays, this._week.dow)\n            : m\n              ? weekdays[m.day()]\n              : weekdays;\n    }\n\n    function localeWeekdaysShort(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysShort, this._week.dow)\n            : m\n              ? this._weekdaysShort[m.day()]\n              : this._weekdaysShort;\n    }\n\n    function localeWeekdaysMin(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysMin, this._week.dow)\n            : m\n              ? this._weekdaysMin[m.day()]\n              : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse(weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._shortWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._minWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n            }\n            if (!this._weekdaysParse[i]) {\n                regex =\n                    '^' +\n                    this.weekdays(mom, '') +\n                    '|^' +\n                    this.weekdaysShort(mom, '') +\n                    '|^' +\n                    this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'dddd' &&\n                this._fullWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'ddd' &&\n                this._shortWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'dd' &&\n                this._minWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        var day = get(this, 'Day');\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    function weekdaysRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict\n                ? this._weekdaysStrictRegex\n                : this._weekdaysRegex;\n        }\n    }\n\n    function weekdaysShortRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict\n                ? this._weekdaysShortStrictRegex\n                : this._weekdaysShortRegex;\n        }\n    }\n\n    function weekdaysMinRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict\n                ? this._weekdaysMinStrictRegex\n                : this._weekdaysMinRegex;\n        }\n    }\n\n    function computeWeekdaysParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [],\n            shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom,\n            minp,\n            shortp,\n            longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = regexEscape(this.weekdaysMin(mom, ''));\n            shortp = regexEscape(this.weekdaysShort(mom, ''));\n            longp = regexEscape(this.weekdays(mom, ''));\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysMinStrictRegex = new RegExp(\n            '^(' + minPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return (\n            '' +\n            hFormat.apply(this) +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return (\n            '' +\n            this.hours() +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    function meridiem(token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(\n                this.hours(),\n                this.minutes(),\n                lowercase\n            );\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // PARSING\n\n    function matchMeridiem(isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a', matchMeridiem);\n    addRegexToken('A', matchMeridiem);\n    addRegexToken('H', match1to2, match1to2HasZero);\n    addRegexToken('h', match1to2, match1to2NoLeadingZero);\n    addRegexToken('k', match1to2, match1to2NoLeadingZero);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM(input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return (input + '').toLowerCase().charAt(0) === 'p';\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i,\n        // Setting the hour should keep the time, because the user explicitly\n        // specified which hour they want. So trying to maintain the same hour (in\n        // a new timezone) makes sense. Adding/subtracting hours does not follow\n        // this rule.\n        getSetHour = makeGetSet('Hours', true);\n\n    function localeMeridiem(hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse,\n    };\n\n    // internal storage for locale config files\n    var locales = {},\n        localeFamilies = {},\n        globalLocale;\n\n    function commonPrefix(arr1, arr2) {\n        var i,\n            minl = Math.min(arr1.length, arr2.length);\n        for (i = 0; i < minl; i += 1) {\n            if (arr1[i] !== arr2[i]) {\n                return i;\n            }\n        }\n        return minl;\n    }\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0,\n            j,\n            next,\n            locale,\n            split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (\n                    next &&\n                    next.length >= j &&\n                    commonPrefix(split, next) >= j - 1\n                ) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function isLocaleNameSane(name) {\n        // Prevent names that look like filesystem paths, i.e contain '/' or '\\'\n        // Ensure name is available and function returns boolean\n        return !!(name && name.match('^[^/\\\\\\\\]*$'));\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null,\n            aliasedRequire;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (\n            locales[name] === undefined &&\n            \"object\" !== 'undefined' &&\n            module &&\n            module.exports &&\n            isLocaleNameSane(name)\n        ) {\n            try {\n                oldLocale = globalLocale._abbr;\n                aliasedRequire = undefined;\n                Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'undefined'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {\n                // mark as not found to avoid repeating expensive file require call causing high CPU\n                // when trying to find en-US, en_US, en-us for every format call\n                locales[name] = null; // null means not found\n            }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale(key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            } else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            } else {\n                if (typeof console !== 'undefined' && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn(\n                        'Locale ' + key + ' not found. Did you forget to load it?'\n                    );\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale(name, config) {\n        if (config !== null) {\n            var locale,\n                parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple(\n                    'defineLocaleOverride',\n                    'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'\n                );\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config,\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale,\n                tmpLocale,\n                parentConfig = baseConfig;\n\n            if (locales[name] != null && locales[name].parentLocale != null) {\n                // Update existing child locale in-place to avoid memory-leaks\n                locales[name].set(mergeConfigs(locales[name]._config, config));\n            } else {\n                // MERGE\n                tmpLocale = loadLocale(name);\n                if (tmpLocale != null) {\n                    parentConfig = tmpLocale._config;\n                }\n                config = mergeConfigs(parentConfig, config);\n                if (tmpLocale == null) {\n                    // updateLocale is called for creating a new locale\n                    // Set abbr so it will have a name (getters return\n                    // undefined otherwise).\n                    config.abbr = name;\n                }\n                locale = new Locale(config);\n                locale.parentLocale = locales[name];\n                locales[name] = locale;\n            }\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                    if (name === getSetGlobalLocale()) {\n                        getSetGlobalLocale(name);\n                    }\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale(key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow(m) {\n        var overflow,\n            a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH] < 0 || a[MONTH] > 11\n                    ? MONTH\n                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])\n                      ? DATE\n                      : a[HOUR] < 0 ||\n                          a[HOUR] > 24 ||\n                          (a[HOUR] === 24 &&\n                              (a[MINUTE] !== 0 ||\n                                  a[SECOND] !== 0 ||\n                                  a[MILLISECOND] !== 0))\n                        ? HOUR\n                        : a[MINUTE] < 0 || a[MINUTE] > 59\n                          ? MINUTE\n                          : a[SECOND] < 0 || a[SECOND] > 59\n                            ? SECOND\n                            : a[MILLISECOND] < 0 || a[MILLISECOND] > 999\n                              ? MILLISECOND\n                              : -1;\n\n            if (\n                getParsingFlags(m)._overflowDayOfYear &&\n                (overflow < YEAR || overflow > DATE)\n            ) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex =\n            /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        basicIsoRegex =\n            /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n        isoDates = [\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n            ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n            ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n            ['YYYY-DDD', /\\d{4}-\\d{3}/],\n            ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n            ['YYYYYYMMDD', /[+-]\\d{10}/],\n            ['YYYYMMDD', /\\d{8}/],\n            ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n            ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n            ['YYYYDDD', /\\d{7}/],\n            ['YYYYMM', /\\d{6}/, false],\n            ['YYYY', /\\d{4}/, false],\n        ],\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n            ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n            ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /\\d\\d:\\d\\d/],\n            ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n            ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n            ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n            ['HHmm', /\\d\\d\\d\\d/],\n            ['HH', /\\d\\d/],\n        ],\n        aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i,\n        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n        rfc2822 =\n            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,\n        obsOffsets = {\n            UT: 0,\n            GMT: 0,\n            EDT: -4 * 60,\n            EST: -5 * 60,\n            CDT: -5 * 60,\n            CST: -6 * 60,\n            MDT: -6 * 60,\n            MST: -7 * 60,\n            PDT: -7 * 60,\n            PST: -8 * 60,\n        };\n\n    // date from iso format\n    function configFromISO(config) {\n        var i,\n            l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime,\n            dateFormat,\n            timeFormat,\n            tzFormat,\n            isoDatesLen = isoDates.length,\n            isoTimesLen = isoTimes.length;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n            for (i = 0, l = isoDatesLen; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimesLen; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    function extractFromRFC2822Strings(\n        yearStr,\n        monthStr,\n        dayStr,\n        hourStr,\n        minuteStr,\n        secondStr\n    ) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10),\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s\n            .replace(/\\([^()]*\\)|[\\n\\t]/g, ' ')\n            .replace(/(\\s\\s+)/g, ' ')\n            .replace(/^\\s\\s*/, '')\n            .replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(\n                    parsedInput[0],\n                    parsedInput[1],\n                    parsedInput[2]\n                ).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10),\n                m = hm % 100,\n                h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i)),\n            parsedArray;\n        if (match) {\n            parsedArray = extractFromRFC2822Strings(\n                match[4],\n                match[3],\n                match[2],\n                match[5],\n                match[6],\n                match[7]\n            );\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        if (config._strict) {\n            config._isValid = false;\n        } else {\n            // Final attempt, use Input Fallback\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [\n                nowValue.getUTCFullYear(),\n                nowValue.getUTCMonth(),\n                nowValue.getUTCDate(),\n            ];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray(config) {\n        var i,\n            date,\n            input = [],\n            currentDate,\n            expectedWeekday,\n            yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (\n                config._dayOfYear > daysInYear(yearToUse) ||\n                config._dayOfYear === 0\n            ) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] =\n                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (\n            config._a[HOUR] === 24 &&\n            config._a[MINUTE] === 0 &&\n            config._a[SECOND] === 0 &&\n            config._a[MILLISECOND] === 0\n        ) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(\n            null,\n            input\n        );\n        expectedWeekday = config._useUTC\n            ? config._d.getUTCDay()\n            : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (\n            config._w &&\n            typeof config._w.d !== 'undefined' &&\n            config._w.d !== expectedWeekday\n        ) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(\n                w.GG,\n                config._a[YEAR],\n                weekOfYear(createLocal(), 1, 4).year\n            );\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i,\n            parsedInput,\n            tokens,\n            token,\n            skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0,\n            era,\n            tokenLen;\n\n        tokens =\n            expandFormat(config._f, config._locale).match(formattingTokens) || [];\n        tokenLen = tokens.length;\n        for (i = 0; i < tokenLen; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) ||\n                [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(\n                    string.indexOf(parsedInput) + parsedInput.length\n                );\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                } else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            } else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver =\n            stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (\n            config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0\n        ) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(\n            config._locale,\n            config._a[HOUR],\n            config._meridiem\n        );\n\n        // handle era\n        era = getParsingFlags(config).era;\n        if (era !== null) {\n            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);\n        }\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n    function meridiemFixWrap(locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n            scoreToBeat,\n            i,\n            currentScore,\n            validFormatFound,\n            bestFormatIsValid = false,\n            configfLen = config._f.length;\n\n        if (configfLen === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < configfLen; i++) {\n            currentScore = 0;\n            validFormatFound = false;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (isValid(tempConfig)) {\n                validFormatFound = true;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (!bestFormatIsValid) {\n                if (\n                    scoreToBeat == null ||\n                    currentScore < scoreToBeat ||\n                    validFormatFound\n                ) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                    if (validFormatFound) {\n                        bestFormatIsValid = true;\n                    }\n                }\n            } else {\n                if (currentScore < scoreToBeat) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                }\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i),\n            dayOrDate = i.day === undefined ? i.date : i.day;\n        config._a = map(\n            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],\n            function (obj) {\n                return obj && parseInt(obj, 10);\n            }\n        );\n\n        configFromArray(config);\n    }\n\n    function createFromConfig(config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig(config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({ nullInput: true });\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        } else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC(input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (format === true || format === false) {\n            strict = format;\n            format = undefined;\n        }\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if (\n            (isObject(input) && isObjectEmpty(input)) ||\n            (isArray(input) && input.length === 0)\n        ) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other < this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        ),\n        prototypeMax = deprecate(\n            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other > this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +new Date();\n    };\n\n    var ordering = [\n        'year',\n        'quarter',\n        'month',\n        'week',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'millisecond',\n    ];\n\n    function isDurationValid(m) {\n        var key,\n            unitHasDecimal = false,\n            i,\n            orderLen = ordering.length;\n        for (key in m) {\n            if (\n                hasOwnProp(m, key) &&\n                !(\n                    indexOf.call(ordering, key) !== -1 &&\n                    (m[key] == null || !isNaN(m[key]))\n                )\n            ) {\n                return false;\n            }\n        }\n\n        for (i = 0; i < orderLen; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds =\n            +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days + weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months + quarters * 3 + years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration(obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (\n                (dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))\n            ) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    // FORMATTING\n\n    function offset(token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset(),\n                sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return (\n                sign +\n                zeroFill(~~(offset / 60), 2) +\n                separator +\n                zeroFill(~~offset % 60, 2)\n            );\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z', matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher),\n            chunk,\n            parts,\n            minutes;\n\n        if (matches === null) {\n            return null;\n        }\n\n        chunk = matches[matches.length - 1] || [];\n        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff =\n                (isMoment(input) || isDate(input)\n                    ? input.valueOf()\n                    : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset(m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset());\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]--\x3e\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset(input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(\n                        this,\n                        createDuration(input - offset, 'm'),\n                        1,\n                        false\n                    );\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone(input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC(keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal(keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset() {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            } else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset(input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime() {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted() {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {},\n            other;\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted =\n                this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal() {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset() {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc() {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n        // and further modified to allow for strings containing both week and day\n        isoRegex =\n            /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration(input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms: input._milliseconds,\n                d: input._days,\n                M: input._months,\n            };\n        } else if (isNumber(input) || !isNaN(+input)) {\n            duration = {};\n            if (key) {\n                duration[key] = +input;\n            } else {\n                duration.milliseconds = +input;\n            }\n        } else if ((match = aspNetRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match\n            };\n        } else if ((match = isoRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: parseIso(match[2], sign),\n                M: parseIso(match[3], sign),\n                w: parseIso(match[4], sign),\n                d: parseIso(match[5], sign),\n                h: parseIso(match[6], sign),\n                m: parseIso(match[7], sign),\n                s: parseIso(match[8], sign),\n            };\n        } else if (duration == null) {\n            // checks for null or undefined\n            duration = {};\n        } else if (\n            typeof duration === 'object' &&\n            ('from' in duration || 'to' in duration)\n        ) {\n            diffRes = momentsDifference(\n                createLocal(duration.from),\n                createLocal(duration.to)\n            );\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        if (isDuration(input) && hasOwnProp(input, '_isValid')) {\n            ret._isValid = input._isValid;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso(inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n\n        res.months =\n            other.month() - base.month() + (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +base.clone().add(res.months, 'M');\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return { milliseconds: 0, months: 0 };\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(\n                    name,\n                    'moment().' +\n                        name +\n                        '(period, number) is deprecated. Please use moment().' +\n                        name +\n                        '(number, period). ' +\n                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'\n                );\n                tmp = val;\n                val = period;\n                period = tmp;\n            }\n\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract(mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add = createAdder(1, 'add'),\n        subtract = createAdder(-1, 'subtract');\n\n    function isString(input) {\n        return typeof input === 'string' || input instanceof String;\n    }\n\n    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\n    function isMomentInput(input) {\n        return (\n            isMoment(input) ||\n            isDate(input) ||\n            isString(input) ||\n            isNumber(input) ||\n            isNumberOrStringArray(input) ||\n            isMomentInputObject(input) ||\n            input === null ||\n            input === undefined\n        );\n    }\n\n    function isMomentInputObject(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'years',\n                'year',\n                'y',\n                'months',\n                'month',\n                'M',\n                'days',\n                'day',\n                'd',\n                'dates',\n                'date',\n                'D',\n                'hours',\n                'hour',\n                'h',\n                'minutes',\n                'minute',\n                'm',\n                'seconds',\n                'second',\n                's',\n                'milliseconds',\n                'millisecond',\n                'ms',\n            ],\n            i,\n            property,\n            propertyLen = properties.length;\n\n        for (i = 0; i < propertyLen; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function isNumberOrStringArray(input) {\n        var arrayTest = isArray(input),\n            dataTypeTest = false;\n        if (arrayTest) {\n            dataTypeTest =\n                input.filter(function (item) {\n                    return !isNumber(item) && isString(input);\n                }).length === 0;\n        }\n        return arrayTest && dataTypeTest;\n    }\n\n    function isCalendarSpec(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'sameDay',\n                'nextDay',\n                'lastDay',\n                'nextWeek',\n                'lastWeek',\n                'sameElse',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6\n            ? 'sameElse'\n            : diff < -1\n              ? 'lastWeek'\n              : diff < 0\n                ? 'lastDay'\n                : diff < 1\n                  ? 'sameDay'\n                  : diff < 2\n                    ? 'nextDay'\n                    : diff < 7\n                      ? 'nextWeek'\n                      : 'sameElse';\n    }\n\n    function calendar$1(time, formats) {\n        // Support for single parameter, formats only overload to the calendar function\n        if (arguments.length === 1) {\n            if (!arguments[0]) {\n                time = undefined;\n                formats = undefined;\n            } else if (isMomentInput(arguments[0])) {\n                time = arguments[0];\n                formats = undefined;\n            } else if (isCalendarSpec(arguments[0])) {\n                formats = arguments[0];\n                time = undefined;\n            }\n        }\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse',\n            output =\n                formats &&\n                (isFunction(formats[format])\n                    ? formats[format].call(this, now)\n                    : formats[format]);\n\n        return this.format(\n            output || this.localeData().calendar(format, this, createLocal(now))\n        );\n    }\n\n    function clone() {\n        return new Moment(this);\n    }\n\n    function isAfter(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween(from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from),\n            localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || '()';\n        return (\n            (inclusivity[0] === '('\n                ? this.isAfter(localFrom, units)\n                : !this.isBefore(localFrom, units)) &&\n            (inclusivity[1] === ')'\n                ? this.isBefore(localTo, units)\n                : !this.isAfter(localTo, units))\n        );\n    }\n\n    function isSame(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return (\n                this.clone().startOf(units).valueOf() <= inputMs &&\n                inputMs <= this.clone().endOf(units).valueOf()\n            );\n        }\n    }\n\n    function isSameOrAfter(input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n\n    function isSameOrBefore(input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n\n    function diff(input, units, asFloat) {\n        var that, zoneDelta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year':\n                output = monthDiff(this, that) / 12;\n                break;\n            case 'month':\n                output = monthDiff(this, that);\n                break;\n            case 'quarter':\n                output = monthDiff(this, that) / 3;\n                break;\n            case 'second':\n                output = (this - that) / 1e3;\n                break; // 1000\n            case 'minute':\n                output = (this - that) / 6e4;\n                break; // 1000 * 60\n            case 'hour':\n                output = (this - that) / 36e5;\n                break; // 1000 * 60 * 60\n            case 'day':\n                output = (this - that - zoneDelta) / 864e5;\n                break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week':\n                output = (this - that - zoneDelta) / 6048e5;\n                break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default:\n                output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff(a, b) {\n        if (a.date() < b.date()) {\n            // end-of-month calculations work correct when the start month has more\n            // days than the end month.\n            return -monthDiff(b, a);\n        }\n        // difference in months\n        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2,\n            adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString() {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true,\n            m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(\n                m,\n                utc\n                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'\n                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'\n            );\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)\n                    .toISOString()\n                    .replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(\n            m,\n            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\n        );\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect() {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment',\n            zone = '',\n            prefix,\n            year,\n            datetime,\n            suffix;\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        prefix = '[' + func + '(\"]';\n        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n        datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format(inputString) {\n        if (!inputString) {\n            inputString = this.isUtc()\n                ? hooks.defaultFormatUtc\n                : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ to: this, from: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow(withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ from: this, to: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow(withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale(key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData() {\n        return this._locale;\n    }\n\n    var MS_PER_SECOND = 1000,\n        MS_PER_MINUTE = 60 * MS_PER_SECOND,\n        MS_PER_HOUR = 60 * MS_PER_MINUTE,\n        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return ((dividend % divisor) + divisor) % divisor;\n    }\n\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n\n    function startOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case 'quarter':\n                time = startOfDate(\n                    this.year(),\n                    this.month() - (this.month() % 3),\n                    1\n                );\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case 'week':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - this.weekday()\n                );\n                break;\n            case 'isoWeek':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - (this.isoWeekday() - 1)\n                );\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time -= mod$1(\n                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                    MS_PER_HOUR\n                );\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function endOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case 'quarter':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month() - (this.month() % 3) + 3,\n                        1\n                    ) - 1;\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case 'week':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - this.weekday() + 7\n                    ) - 1;\n                break;\n            case 'isoWeek':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - (this.isoWeekday() - 1) + 7\n                    ) - 1;\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time +=\n                    MS_PER_HOUR -\n                    mod$1(\n                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                        MS_PER_HOUR\n                    ) -\n                    1;\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function valueOf() {\n        return this._d.valueOf() - (this._offset || 0) * 60000;\n    }\n\n    function unix() {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate() {\n        return new Date(this.valueOf());\n    }\n\n    function toArray() {\n        var m = this;\n        return [\n            m.year(),\n            m.month(),\n            m.date(),\n            m.hour(),\n            m.minute(),\n            m.second(),\n            m.millisecond(),\n        ];\n    }\n\n    function toObject() {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds(),\n        };\n    }\n\n    function toJSON() {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2() {\n        return isValid(this);\n    }\n\n    function parsingFlags() {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt() {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict,\n        };\n    }\n\n    addFormatToken('N', 0, 0, 'eraAbbr');\n    addFormatToken('NN', 0, 0, 'eraAbbr');\n    addFormatToken('NNN', 0, 0, 'eraAbbr');\n    addFormatToken('NNNN', 0, 0, 'eraName');\n    addFormatToken('NNNNN', 0, 0, 'eraNarrow');\n\n    addFormatToken('y', ['y', 1], 'yo', 'eraYear');\n    addFormatToken('y', ['yy', 2], 0, 'eraYear');\n    addFormatToken('y', ['yyy', 3], 0, 'eraYear');\n    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');\n\n    addRegexToken('N', matchEraAbbr);\n    addRegexToken('NN', matchEraAbbr);\n    addRegexToken('NNN', matchEraAbbr);\n    addRegexToken('NNNN', matchEraName);\n    addRegexToken('NNNNN', matchEraNarrow);\n\n    addParseToken(\n        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],\n        function (input, array, config, token) {\n            var era = config._locale.erasParse(input, token, config._strict);\n            if (era) {\n                getParsingFlags(config).era = era;\n            } else {\n                getParsingFlags(config).invalidEra = input;\n            }\n        }\n    );\n\n    addRegexToken('y', matchUnsigned);\n    addRegexToken('yy', matchUnsigned);\n    addRegexToken('yyy', matchUnsigned);\n    addRegexToken('yyyy', matchUnsigned);\n    addRegexToken('yo', matchEraYearOrdinal);\n\n    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);\n    addParseToken(['yo'], function (input, array, config, token) {\n        var match;\n        if (config._locale._eraYearOrdinalRegex) {\n            match = input.match(config._locale._eraYearOrdinalRegex);\n        }\n\n        if (config._locale.eraYearOrdinalParse) {\n            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);\n        } else {\n            array[YEAR] = parseInt(input, 10);\n        }\n    });\n\n    function localeEras(m, format) {\n        var i,\n            l,\n            date,\n            eras = this._eras || getLocale('en')._eras;\n        for (i = 0, l = eras.length; i < l; ++i) {\n            switch (typeof eras[i].since) {\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].since).startOf('day');\n                    eras[i].since = date.valueOf();\n                    break;\n            }\n\n            switch (typeof eras[i].until) {\n                case 'undefined':\n                    eras[i].until = +Infinity;\n                    break;\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].until).startOf('day').valueOf();\n                    eras[i].until = date.valueOf();\n                    break;\n            }\n        }\n        return eras;\n    }\n\n    function localeErasParse(eraName, format, strict) {\n        var i,\n            l,\n            eras = this.eras(),\n            name,\n            abbr,\n            narrow;\n        eraName = eraName.toUpperCase();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            name = eras[i].name.toUpperCase();\n            abbr = eras[i].abbr.toUpperCase();\n            narrow = eras[i].narrow.toUpperCase();\n\n            if (strict) {\n                switch (format) {\n                    case 'N':\n                    case 'NN':\n                    case 'NNN':\n                        if (abbr === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNN':\n                        if (name === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNNN':\n                        if (narrow === eraName) {\n                            return eras[i];\n                        }\n                        break;\n                }\n            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {\n                return eras[i];\n            }\n        }\n    }\n\n    function localeErasConvertYear(era, year) {\n        var dir = era.since <= era.until ? +1 : -1;\n        if (year === undefined) {\n            return hooks(era.since).year();\n        } else {\n            return hooks(era.since).year() + (year - era.offset) * dir;\n        }\n    }\n\n    function getEraName() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].name;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].name;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraNarrow() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].narrow;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].narrow;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraAbbr() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].abbr;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].abbr;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraYear() {\n        var i,\n            l,\n            dir,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            dir = eras[i].since <= eras[i].until ? +1 : -1;\n\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (\n                (eras[i].since <= val && val <= eras[i].until) ||\n                (eras[i].until <= val && val <= eras[i].since)\n            ) {\n                return (\n                    (this.year() - hooks(eras[i].since).year()) * dir +\n                    eras[i].offset\n                );\n            }\n        }\n\n        return this.year();\n    }\n\n    function erasNameRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNameRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNameRegex : this._erasRegex;\n    }\n\n    function erasAbbrRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasAbbrRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasAbbrRegex : this._erasRegex;\n    }\n\n    function erasNarrowRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNarrowRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNarrowRegex : this._erasRegex;\n    }\n\n    function matchEraAbbr(isStrict, locale) {\n        return locale.erasAbbrRegex(isStrict);\n    }\n\n    function matchEraName(isStrict, locale) {\n        return locale.erasNameRegex(isStrict);\n    }\n\n    function matchEraNarrow(isStrict, locale) {\n        return locale.erasNarrowRegex(isStrict);\n    }\n\n    function matchEraYearOrdinal(isStrict, locale) {\n        return locale._eraYearOrdinalRegex || matchUnsigned;\n    }\n\n    function computeErasParse() {\n        var abbrPieces = [],\n            namePieces = [],\n            narrowPieces = [],\n            mixedPieces = [],\n            i,\n            l,\n            erasName,\n            erasAbbr,\n            erasNarrow,\n            eras = this.eras();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            erasName = regexEscape(eras[i].name);\n            erasAbbr = regexEscape(eras[i].abbr);\n            erasNarrow = regexEscape(eras[i].narrow);\n\n            namePieces.push(erasName);\n            abbrPieces.push(erasAbbr);\n            narrowPieces.push(erasNarrow);\n            mixedPieces.push(erasName);\n            mixedPieces.push(erasAbbr);\n            mixedPieces.push(erasNarrow);\n        }\n\n        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');\n        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');\n        this._erasNarrowRegex = new RegExp(\n            '^(' + narrowPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken(token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg', 'weekYear');\n    addWeekYearFormatToken('ggggg', 'weekYear');\n    addWeekYearFormatToken('GGGG', 'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    // PARSING\n\n    addRegexToken('G', matchSigned);\n    addRegexToken('g', matchSigned);\n    addRegexToken('GG', match1to2, match2);\n    addRegexToken('gg', match1to2, match2);\n    addRegexToken('GGGG', match1to4, match4);\n    addRegexToken('gggg', match1to4, match4);\n    addRegexToken('GGGGG', match1to6, match6);\n    addRegexToken('ggggg', match1to6, match6);\n\n    addWeekParseToken(\n        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],\n        function (input, week, config, token) {\n            week[token.substr(0, 2)] = toInt(input);\n        }\n    );\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.week(),\n            this.weekday() + this.localeData()._week.dow,\n            this.localeData()._week.dow,\n            this.localeData()._week.doy\n        );\n    }\n\n    function getSetISOWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.isoWeek(),\n            this.isoWeekday(),\n            1,\n            4\n        );\n    }\n\n    function getISOWeeksInYear() {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getISOWeeksInISOWeekYear() {\n        return weeksInYear(this.isoWeekYear(), 1, 4);\n    }\n\n    function getWeeksInYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getWeeksInWeekYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter(input) {\n        return input == null\n            ? Math.ceil((this.month() + 1) / 3)\n            : this.month((input - 1) * 3 + (this.month() % 3));\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // PARSING\n\n    addRegexToken('D', match1to2, match1to2NoLeadingZero);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict\n            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse\n            : locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // PARSING\n\n    addRegexToken('DDD', match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear(input) {\n        var dayOfYear =\n            Math.round(\n                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5\n            ) + 1;\n        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // PARSING\n\n    addRegexToken('m', match1to2, match1to2HasZero);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // PARSING\n\n    addRegexToken('s', match1to2, match1to2HasZero);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n    // PARSING\n\n    addRegexToken('S', match1to3, match1);\n    addRegexToken('SS', match1to3, match2);\n    addRegexToken('SSS', match1to3, match3);\n\n    var token, getSetMillisecond;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n\n    getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z', 0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr() {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName() {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add = add;\n    proto.calendar = calendar$1;\n    proto.clone = clone;\n    proto.diff = diff;\n    proto.endOf = endOf;\n    proto.format = format;\n    proto.from = from;\n    proto.fromNow = fromNow;\n    proto.to = to;\n    proto.toNow = toNow;\n    proto.get = stringGet;\n    proto.invalidAt = invalidAt;\n    proto.isAfter = isAfter;\n    proto.isBefore = isBefore;\n    proto.isBetween = isBetween;\n    proto.isSame = isSame;\n    proto.isSameOrAfter = isSameOrAfter;\n    proto.isSameOrBefore = isSameOrBefore;\n    proto.isValid = isValid$2;\n    proto.lang = lang;\n    proto.locale = locale;\n    proto.localeData = localeData;\n    proto.max = prototypeMax;\n    proto.min = prototypeMin;\n    proto.parsingFlags = parsingFlags;\n    proto.set = stringSet;\n    proto.startOf = startOf;\n    proto.subtract = subtract;\n    proto.toArray = toArray;\n    proto.toObject = toObject;\n    proto.toDate = toDate;\n    proto.toISOString = toISOString;\n    proto.inspect = inspect;\n    if (typeof Symbol !== 'undefined' && Symbol.for != null) {\n        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {\n            return 'Moment<' + this.format() + '>';\n        };\n    }\n    proto.toJSON = toJSON;\n    proto.toString = toString;\n    proto.unix = unix;\n    proto.valueOf = valueOf;\n    proto.creationData = creationData;\n    proto.eraName = getEraName;\n    proto.eraNarrow = getEraNarrow;\n    proto.eraAbbr = getEraAbbr;\n    proto.eraYear = getEraYear;\n    proto.year = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week = proto.weeks = getSetWeek;\n    proto.isoWeek = proto.isoWeeks = getSetISOWeek;\n    proto.weeksInYear = getWeeksInYear;\n    proto.weeksInWeekYear = getWeeksInWeekYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;\n    proto.date = getSetDayOfMonth;\n    proto.day = proto.days = getSetDayOfWeek;\n    proto.weekday = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset = getSetOffset;\n    proto.utc = setOffsetToUTC;\n    proto.local = setOffsetToLocal;\n    proto.parseZone = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST = isDaylightSavingTime;\n    proto.isLocal = isLocal;\n    proto.isUtcOffset = isUtcOffset;\n    proto.isUtc = isUtc;\n    proto.isUTC = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates = deprecate(\n        'dates accessor is deprecated. Use date instead.',\n        getSetDayOfMonth\n    );\n    proto.months = deprecate(\n        'months accessor is deprecated. Use month instead',\n        getSetMonth\n    );\n    proto.years = deprecate(\n        'years accessor is deprecated. Use year instead',\n        getSetYear\n    );\n    proto.zone = deprecate(\n        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',\n        getSetZone\n    );\n    proto.isDSTShifted = deprecate(\n        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',\n        isDaylightSavingTimeShifted\n    );\n\n    function createUnix(input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone() {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat(string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar = calendar;\n    proto$1.longDateFormat = longDateFormat;\n    proto$1.invalidDate = invalidDate;\n    proto$1.ordinal = ordinal;\n    proto$1.preparse = preParsePostFormat;\n    proto$1.postformat = preParsePostFormat;\n    proto$1.relativeTime = relativeTime;\n    proto$1.pastFuture = pastFuture;\n    proto$1.set = set;\n    proto$1.eras = localeEras;\n    proto$1.erasParse = localeErasParse;\n    proto$1.erasConvertYear = localeErasConvertYear;\n    proto$1.erasAbbrRegex = erasAbbrRegex;\n    proto$1.erasNameRegex = erasNameRegex;\n    proto$1.erasNarrowRegex = erasNarrowRegex;\n\n    proto$1.months = localeMonths;\n    proto$1.monthsShort = localeMonthsShort;\n    proto$1.monthsParse = localeMonthsParse;\n    proto$1.monthsRegex = monthsRegex;\n    proto$1.monthsShortRegex = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays = localeWeekdays;\n    proto$1.weekdaysMin = localeWeekdaysMin;\n    proto$1.weekdaysShort = localeWeekdaysShort;\n    proto$1.weekdaysParse = localeWeekdaysParse;\n\n    proto$1.weekdaysRegex = weekdaysRegex;\n    proto$1.weekdaysShortRegex = weekdaysShortRegex;\n    proto$1.weekdaysMinRegex = weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1(format, index, field, setter) {\n        var locale = getLocale(),\n            utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl(format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i,\n            out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl(localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0,\n            i,\n            out = [];\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths(format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort(format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        eras: [\n            {\n                since: '0001-01-01',\n                until: +Infinity,\n                offset: 1,\n                name: 'Anno Domini',\n                narrow: 'AD',\n                abbr: 'AD',\n            },\n            {\n                since: '0000-12-31',\n                until: -Infinity,\n                offset: 1,\n                name: 'Before Christ',\n                narrow: 'BC',\n                abbr: 'BC',\n            },\n        ],\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal: function (number) {\n            var b = number % 10,\n                output =\n                    toInt((number % 100) / 10) === 1\n                        ? 'th'\n                        : b === 1\n                          ? 'st'\n                          : b === 2\n                            ? 'nd'\n                            : b === 3\n                              ? 'rd'\n                              : 'th';\n            return number + output;\n        },\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate(\n        'moment.lang is deprecated. Use moment.locale instead.',\n        getSetGlobalLocale\n    );\n    hooks.langData = deprecate(\n        'moment.langData is deprecated. Use moment.localeData instead.',\n        getLocale\n    );\n\n    var mathAbs = Math.abs;\n\n    function abs() {\n        var data = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.months = mathAbs(data.months);\n        data.years = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1(duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days += direction * other._days;\n        duration._months += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1(input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1(input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil(number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble() {\n        var milliseconds = this._milliseconds,\n            days = this._days,\n            months = this._months,\n            data = this._data,\n            seconds,\n            minutes,\n            hours,\n            years,\n            monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (\n            !(\n                (milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0)\n            )\n        ) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds = absFloor(milliseconds / 1000);\n        data.seconds = seconds % 60;\n\n        minutes = absFloor(seconds / 60);\n        data.minutes = minutes % 60;\n\n        hours = absFloor(minutes / 60);\n        data.hours = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days = days;\n        data.months = months;\n        data.years = years;\n\n        return this;\n    }\n\n    function daysToMonths(days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return (days * 4800) / 146097;\n    }\n\n    function monthsToDays(months) {\n        // the reverse of daysToMonths\n        return (months * 146097) / 4800;\n    }\n\n    function as(units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days,\n            months,\n            milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'quarter' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch (units) {\n                case 'month':\n                    return months;\n                case 'quarter':\n                    return months / 3;\n                case 'year':\n                    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week':\n                    return days / 7 + milliseconds / 6048e5;\n                case 'day':\n                    return days + milliseconds / 864e5;\n                case 'hour':\n                    return days * 24 + milliseconds / 36e5;\n                case 'minute':\n                    return days * 1440 + milliseconds / 6e4;\n                case 'second':\n                    return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond':\n                    return Math.floor(days * 864e5) + milliseconds;\n                default:\n                    throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    function makeAs(alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms'),\n        asSeconds = makeAs('s'),\n        asMinutes = makeAs('m'),\n        asHours = makeAs('h'),\n        asDays = makeAs('d'),\n        asWeeks = makeAs('w'),\n        asMonths = makeAs('M'),\n        asQuarters = makeAs('Q'),\n        asYears = makeAs('y'),\n        valueOf$1 = asMilliseconds;\n\n    function clone$1() {\n        return createDuration(this);\n    }\n\n    function get$2(units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds'),\n        seconds = makeGetter('seconds'),\n        minutes = makeGetter('minutes'),\n        hours = makeGetter('hours'),\n        days = makeGetter('days'),\n        months = makeGetter('months'),\n        years = makeGetter('years');\n\n    function weeks() {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round,\n        thresholds = {\n            ss: 44, // a few seconds to seconds\n            s: 45, // seconds to minute\n            m: 45, // minutes to hour\n            h: 22, // hours to day\n            d: 26, // days to month/week\n            w: null, // weeks to month\n            M: 11, // months to year\n        };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {\n        var duration = createDuration(posNegDuration).abs(),\n            seconds = round(duration.as('s')),\n            minutes = round(duration.as('m')),\n            hours = round(duration.as('h')),\n            days = round(duration.as('d')),\n            months = round(duration.as('M')),\n            weeks = round(duration.as('w')),\n            years = round(duration.as('y')),\n            a =\n                (seconds <= thresholds.ss && ['s', seconds]) ||\n                (seconds < thresholds.s && ['ss', seconds]) ||\n                (minutes <= 1 && ['m']) ||\n                (minutes < thresholds.m && ['mm', minutes]) ||\n                (hours <= 1 && ['h']) ||\n                (hours < thresholds.h && ['hh', hours]) ||\n                (days <= 1 && ['d']) ||\n                (days < thresholds.d && ['dd', days]);\n\n        if (thresholds.w != null) {\n            a =\n                a ||\n                (weeks <= 1 && ['w']) ||\n                (weeks < thresholds.w && ['ww', weeks]);\n        }\n        a = a ||\n            (months <= 1 && ['M']) ||\n            (months < thresholds.M && ['MM', months]) ||\n            (years <= 1 && ['y']) || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding(roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof roundingFunction === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold(threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize(argWithSuffix, argThresholds) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var withSuffix = false,\n            th = thresholds,\n            locale,\n            output;\n\n        if (typeof argWithSuffix === 'object') {\n            argThresholds = argWithSuffix;\n            argWithSuffix = false;\n        }\n        if (typeof argWithSuffix === 'boolean') {\n            withSuffix = argWithSuffix;\n        }\n        if (typeof argThresholds === 'object') {\n            th = Object.assign({}, thresholds, argThresholds);\n            if (argThresholds.s != null && argThresholds.ss == null) {\n                th.ss = argThresholds.s - 1;\n            }\n        }\n\n        locale = this.localeData();\n        output = relativeTime$1(this, !withSuffix, th, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return (x > 0) - (x < 0) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000,\n            days = abs$1(this._days),\n            months = abs$1(this._months),\n            minutes,\n            hours,\n            years,\n            s,\n            total = this.asSeconds(),\n            totalSign,\n            ymSign,\n            daysSign,\n            hmsSign;\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes = absFloor(seconds / 60);\n        hours = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n\n        totalSign = total < 0 ? '-' : '';\n        ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return (\n            totalSign +\n            'P' +\n            (years ? ymSign + years + 'Y' : '') +\n            (months ? ymSign + months + 'M' : '') +\n            (days ? daysSign + days + 'D' : '') +\n            (hours || minutes || seconds ? 'T' : '') +\n            (hours ? hmsSign + hours + 'H' : '') +\n            (minutes ? hmsSign + minutes + 'M' : '') +\n            (seconds ? hmsSign + s + 'S' : '')\n        );\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid = isValid$1;\n    proto$2.abs = abs;\n    proto$2.add = add$1;\n    proto$2.subtract = subtract$1;\n    proto$2.as = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds = asSeconds;\n    proto$2.asMinutes = asMinutes;\n    proto$2.asHours = asHours;\n    proto$2.asDays = asDays;\n    proto$2.asWeeks = asWeeks;\n    proto$2.asMonths = asMonths;\n    proto$2.asQuarters = asQuarters;\n    proto$2.asYears = asYears;\n    proto$2.valueOf = valueOf$1;\n    proto$2._bubble = bubble;\n    proto$2.clone = clone$1;\n    proto$2.get = get$2;\n    proto$2.milliseconds = milliseconds;\n    proto$2.seconds = seconds;\n    proto$2.minutes = minutes;\n    proto$2.hours = hours;\n    proto$2.days = days;\n    proto$2.weeks = weeks;\n    proto$2.months = months;\n    proto$2.years = years;\n    proto$2.humanize = humanize;\n    proto$2.toISOString = toISOString$1;\n    proto$2.toString = toISOString$1;\n    proto$2.toJSON = toISOString$1;\n    proto$2.locale = locale;\n    proto$2.localeData = localeData;\n\n    proto$2.toIsoString = deprecate(\n        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',\n        toISOString$1\n    );\n    proto$2.lang = lang;\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    //! moment.js\n\n    hooks.version = '2.30.1';\n\n    setHookCallback(createLocal);\n\n    hooks.fn = proto;\n    hooks.min = min;\n    hooks.max = max;\n    hooks.now = now;\n    hooks.utc = createUTC;\n    hooks.unix = createUnix;\n    hooks.months = listMonths;\n    hooks.isDate = isDate;\n    hooks.locale = getSetGlobalLocale;\n    hooks.invalid = createInvalid;\n    hooks.duration = createDuration;\n    hooks.isMoment = isMoment;\n    hooks.weekdays = listWeekdays;\n    hooks.parseZone = createInZone;\n    hooks.localeData = getLocale;\n    hooks.isDuration = isDuration;\n    hooks.monthsShort = listMonthsShort;\n    hooks.weekdaysMin = listWeekdaysMin;\n    hooks.defineLocale = defineLocale;\n    hooks.updateLocale = updateLocale;\n    hooks.locales = listLocales;\n    hooks.weekdaysShort = listWeekdaysShort;\n    hooks.normalizeUnits = normalizeUnits;\n    hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat = getCalendarFormat;\n    hooks.prototype = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD', // <input type=\"date\" />\n        TIME: 'HH:mm', // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss', // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS', // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'GGGG-[W]WW', // <input type=\"week\" />\n        MONTH: 'YYYY-MM', // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///93\n")},262:function(__unused_webpack_module,exports){"use strict";eval("var __webpack_unused_export__;\n\n__webpack_unused_export__ = ({ value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.A = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYyLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDZCQUE2QyxFQUFFLGFBQWEsQ0FBQztBQUM3RDtBQUNBO0FBQ0EsU0FBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL1Z1ZURhdGV0aW1lSnMvLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qcz9iOWE2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gcnVudGltZSBoZWxwZXIgZm9yIHNldHRpbmcgcHJvcGVydGllcyBvbiBjb21wb25lbnRzXG4vLyBpbiBhIHRyZWUtc2hha2FibGUgd2F5XG5leHBvcnRzLmRlZmF1bHQgPSAoc2ZjLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IHNmYy5fX3ZjY09wdHMgfHwgc2ZjO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBwcm9wcykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///262\n")},808:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ VueDatetimeJs; }\n});\n\n// EXTERNAL MODULE: external \"vue\"\nvar external_vue_ = __webpack_require__(380);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/picker/VueDatetimeJs.vue?vue&type=template&id=4d10bd72\n\nvar _hoisted_1 = [\"data-type\", \"data-locale\", \"data-locale-dir\"];\nvar _hoisted_2 = [\"for\"];\nvar _hoisted_3 = {\n  key: 2\n};\nvar _hoisted_4 = [\"id\", \"name\", \"placeholder\", \"value\", \"disabled\"];\nvar _hoisted_5 = [\"name\", \"value\"];\nvar _hoisted_6 = [\"name\", \"value\"];\nvar _hoisted_7 = [\"data-type\"];\nvar _hoisted_8 = [\"onClick\"];\nvar _hoisted_9 = [\"title\", \"disabled\"];\nvar _hoisted_10 = [\"title\", \"disabled\"];\nvar _hoisted_11 = [\"disabled\", \"onClick\"];\nvar _hoisted_12 = {\n  key: 1,\n  style: {\n    \"height\": \"250px\"\n  }\n};\nvar _hoisted_13 = [\"disabled\", \"onClick\"];\nvar _hoisted_14 = [\"disabled\", \"onClick\"];\nvar _hoisted_15 = {\n  key: 2\n};\nvar _hoisted_16 = [\"disabled\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_time_icon = (0,external_vue_.resolveComponent)(\"time-icon\");\n  var _component_calendar_icon = (0,external_vue_.resolveComponent)(\"calendar-icon\");\n  var _component_arrow = (0,external_vue_.resolveComponent)(\"arrow\");\n  var _component_btn = (0,external_vue_.resolveComponent)(\"btn\");\n  return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"span\", {\n    class: (0,external_vue_.normalizeClass)($options.prefix('main')),\n    \"data-type\": $props.type,\n    \"data-locale\": $data.localeData.name,\n    \"data-locale-dir\": $data.localeData.config.dir\n  }, [!$props.element ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"span\", {\n    key: 0,\n    class: (0,external_vue_.normalizeClass)([$options.prefix('input-group'), {\n      disabled: $props.disabled\n    }])\n  }, [(0,external_vue_.createElementVNode)(\"label\", {\n    for: $options.id,\n    class: (0,external_vue_.normalizeClass)([$options.prefix('icon-btn')]),\n    style: (0,external_vue_.normalizeStyle)({\n      'background-color': $props.color\n    }),\n    onClick: _cache[0] || (_cache[0] = (0,external_vue_.withModifiers)(function ($event) {\n      return $data.visible = true;\n    }, [\"prevent\", \"stop\"]))\n  }, [(0,external_vue_.renderSlot)(_ctx.$slots, \"label\", {}, function () {\n    return [$props.type === 'time' ? ((0,external_vue_.openBlock)(), (0,external_vue_.createBlock)(_component_time_icon, {\n      key: 0,\n      width: \"16px\",\n      height: \"16px\"\n    })) : ((0,external_vue_.openBlock)(), (0,external_vue_.createBlock)(_component_calendar_icon, {\n      key: 1,\n      width: \"16px\",\n      height: \"16px\"\n    })), $props.label ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"span\", _hoisted_3, (0,external_vue_.toDisplayString)($props.label), 1 /* TEXT */)) : (0,external_vue_.createCommentVNode)(\"v-if\", true)];\n  })], 14 /* CLASS, STYLE, PROPS */, _hoisted_2), (0,external_vue_.createElementVNode)(\"input\", {\n    id: $options.id,\n    type: \"text\",\n    name: $props.name,\n    class: (0,external_vue_.normalizeClass)([$props.inputClass, {\n      'is-editable': $props.editable\n    }]),\n    placeholder: $props.placeholder,\n    value: $options.displayValue,\n    disabled: $props.disabled,\n    onFocus: _cache[1] || (_cache[1] = function () {\n      return $options.focus && $options.focus.apply($options, arguments);\n    }),\n    onBlur: _cache[2] || (_cache[2] = function () {\n      return $options.setOutput && $options.setOutput.apply($options, arguments);\n    })\n  }, null, 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_4), $props.altName ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"input\", {\n    key: 0,\n    type: \"hidden\",\n    name: $props.altName,\n    value: $options.altFormatted\n  }, null, 8 /* PROPS */, _hoisted_5)) : (0,external_vue_.createCommentVNode)(\"v-if\", true), $props.clearable && !$props.disabled && $options.displayValue ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"i\", {\n    key: 1,\n    class: (0,external_vue_.normalizeClass)([$options.prefix('clear-btn')]),\n    onClick: _cache[3] || (_cache[3] = function () {\n      return $options.clearValue && $options.clearValue.apply($options, arguments);\n    })\n  }, \"x\", 2 /* CLASS */)) : (0,external_vue_.createCommentVNode)(\"v-if\", true)], 2 /* CLASS */)) : $props.altName ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"input\", {\n    key: 1,\n    type: \"hidden\",\n    name: $props.altName,\n    value: $options.altFormatted\n  }, null, 8 /* PROPS */, _hoisted_6)) : (0,external_vue_.createCommentVNode)(\"v-if\", true), (0,external_vue_.createVNode)(external_vue_.Transition, {\n    name: \"fade-scale\"\n  }, {\n    default: (0,external_vue_.withCtx)(function () {\n      return [$data.visible ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n        key: 0,\n        ref: \"picker\",\n        class: (0,external_vue_.normalizeClass)([$options.prefix('wrapper'), $options.prefix(\"dir-\".concat($data.localeData.config.dir)), $props.inline ? $options.prefix('is-inline') : '', $props.autoSubmit && !$options.hasStep('t') ? $options.prefix('no-footer') : '']),\n        \"data-type\": $props.type,\n        onClick: _cache[18] || (_cache[18] = (0,external_vue_.withModifiers)(function () {\n          return $options.wrapperClick && $options.wrapperClick.apply($options, arguments);\n        }, [\"self\"]))\n      }, [(0,external_vue_.createElementVNode)(\"div\", {\n        class: (0,external_vue_.normalizeClass)([$options.prefix('container')])\n      }, [(0,external_vue_.createElementVNode)(\"div\", {\n        class: (0,external_vue_.normalizeClass)([$options.prefix('content')])\n      }, [(0,external_vue_.createElementVNode)(\"div\", {\n        class: (0,external_vue_.normalizeClass)([$options.prefix('header')]),\n        style: (0,external_vue_.normalizeStyle)({\n          'background-color': $props.color\n        })\n      }, [['date', 'datetime', 'year-month'].indexOf($props.type) !== -1 ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n        key: 0,\n        class: (0,external_vue_.normalizeClass)([$options.prefix('year-label'), $data.directionClass]),\n        onClick: _cache[4] || (_cache[4] = function ($event) {\n          return $options.goStep('y');\n        })\n      }, [(0,external_vue_.createVNode)(external_vue_.Transition, {\n        name: \"slideY\"\n      }, {\n        default: (0,external_vue_.withCtx)(function () {\n          return [((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"span\", {\n            key: $data.selectedDate.xYear()\n          }, [(0,external_vue_.createElementVNode)(\"span\", null, (0,external_vue_.toDisplayString)($data.selectedDate.xYear()), 1 /* TEXT */)]))];\n        }),\n        _: 1 /* STABLE */\n      })], 2 /* CLASS */)) : (0,external_vue_.createCommentVNode)(\"v-if\", true), $props.type !== 'year-month' ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n        key: 1,\n        class: (0,external_vue_.normalizeClass)([$options.prefix('date'), $data.directionClass]),\n        style: (0,external_vue_.normalizeStyle)({\n          'font-size': $props.type === 'datetime' ? '22px' : ''\n        })\n      }, [(0,external_vue_.createVNode)(external_vue_.Transition, {\n        name: \"slideY\"\n      }, {\n        default: (0,external_vue_.withCtx)(function () {\n          return [((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"span\", {\n            key: $options.formattedDate\n          }, (0,external_vue_.toDisplayString)($options.formattedDate), 1 /* TEXT */))];\n        }),\n        _: 1 /* STABLE */\n      })], 6 /* CLASS, STYLE */)) : (0,external_vue_.createCommentVNode)(\"v-if\", true), $data.locales.length > 1 ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"ul\", {\n        key: 2,\n        class: (0,external_vue_.normalizeClass)([$options.prefix('locales')])\n      }, [((0,external_vue_.openBlock)(true), (0,external_vue_.createElementBlock)(external_vue_.Fragment, null, (0,external_vue_.renderList)($data.locales, function (localeItem, i) {\n        return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"li\", {\n          key: i,\n          class: (0,external_vue_.normalizeClass)({\n            active: localeItem === $data.localeData.name\n          }),\n          onClick: function onClick($event) {\n            return $options.setLocale(localeItem);\n          }\n        }, (0,external_vue_.toDisplayString)($data.core.localesConfig[localeItem].lang.label || localeItem.toUpperCase()), 11 /* TEXT, CLASS, PROPS */, _hoisted_8);\n      }), 128 /* KEYED_FRAGMENT */))], 2 /* CLASS */)) : (0,external_vue_.createCommentVNode)(\"v-if\", true)], 6 /* CLASS, STYLE */), (0,external_vue_.createElementVNode)(\"div\", {\n        class: (0,external_vue_.normalizeClass)([$options.prefix('body')])\n      }, [$options.hasStep('d') ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(external_vue_.Fragment, {\n        key: 0\n      }, [(0,external_vue_.createElementVNode)(\"div\", {\n        class: (0,external_vue_.normalizeClass)([$options.prefix('controls'), $data.directionClassDate])\n      }, [(0,external_vue_.createElementVNode)(\"button\", {\n        type: \"button\",\n        class: (0,external_vue_.normalizeClass)([$options.prefix('next')]),\n        title: $options.lang.nextMonth,\n        disabled: $options.nextMonthDisabled,\n        onClick: _cache[5] || (_cache[5] = function () {\n          return $options.nextMonth && $options.nextMonth.apply($options, arguments);\n        })\n      }, [(0,external_vue_.createVNode)(_component_arrow, {\n        width: \"10\",\n        fill: \"#000\",\n        direction: \"right\",\n        style: {\n          \"vertical-align\": \"middle\"\n        }\n      })], 10 /* CLASS, PROPS */, _hoisted_9), (0,external_vue_.createElementVNode)(\"button\", {\n        type: \"button\",\n        class: (0,external_vue_.normalizeClass)([$options.prefix('prev')]),\n        title: $options.lang.prevMonth,\n        disabled: $options.prevMonthDisabled,\n        onClick: _cache[6] || (_cache[6] = function () {\n          return $options.prevMonth && $options.prevMonth.apply($options, arguments);\n        })\n      }, [(0,external_vue_.createVNode)(_component_arrow, {\n        width: \"10\",\n        fill: \"#000\",\n        direction: \"left\",\n        style: {\n          \"vertical-align\": \"middle\"\n        }\n      })], 10 /* CLASS, PROPS */, _hoisted_10), (0,external_vue_.createVNode)(external_vue_.Transition, {\n        name: \"slideX\"\n      }, {\n        default: (0,external_vue_.withCtx)(function () {\n          return [((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n            key: $data.date.xMonth(),\n            class: (0,external_vue_.normalizeClass)([$options.prefix('month-label')]),\n            onClick: _cache[7] || (_cache[7] = function ($event) {\n              return $options.goStep('m');\n            })\n          }, [(0,external_vue_.createElementVNode)(\"span\", {\n            style: (0,external_vue_.normalizeStyle)({\n              'border-color': $props.color,\n              color: $props.color\n            })\n          }, (0,external_vue_.toDisplayString)($data.date.xFormat($props.calendar === 'hijri' ? 'iMMMM iYYYY' : 'jMMMM jYYYY')), 5 /* TEXT, STYLE */)], 2 /* CLASS */))];\n        }),\n        _: 1 /* STABLE */\n      })], 2 /* CLASS */), (0,external_vue_.createElementVNode)(\"div\", {\n        class: (0,external_vue_.normalizeClass)([\"clearfix\", [$options.prefix('month'), $data.directionClassDate]])\n      }, [(0,external_vue_.createElementVNode)(\"div\", {\n        class: (0,external_vue_.normalizeClass)([\"clearfix\", [$options.prefix('week')]])\n      }, [((0,external_vue_.openBlock)(true), (0,external_vue_.createElementBlock)(external_vue_.Fragment, null, (0,external_vue_.renderList)($options.weekDays, function (day, i) {\n        return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n          key: \"\".concat(i, \"-\").concat(day),\n          class: (0,external_vue_.normalizeClass)([$options.prefix('weekday')])\n        }, (0,external_vue_.toDisplayString)(day), 3 /* TEXT, CLASS */);\n      }), 128 /* KEYED_FRAGMENT */))], 2 /* CLASS */), (0,external_vue_.createElementVNode)(\"div\", {\n        class: (0,external_vue_.normalizeClass)([$options.prefix('days')]),\n        style: (0,external_vue_.normalizeStyle)({\n          height: $options.month.length * 40 + 'px'\n        })\n      }, [(0,external_vue_.createVNode)(external_vue_.Transition, {\n        name: \"slideX\",\n        class: (0,external_vue_.normalizeClass)($data.directionClassDate)\n      }, {\n        default: (0,external_vue_.withCtx)(function () {\n          return [((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n            key: $data.date.xMonth()\n          }, [((0,external_vue_.openBlock)(true), (0,external_vue_.createElementBlock)(external_vue_.Fragment, null, (0,external_vue_.renderList)($options.month, function (m, mi) {\n            return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n              key: mi,\n              class: \"clearfix\"\n            }, [((0,external_vue_.openBlock)(true), (0,external_vue_.createElementBlock)(external_vue_.Fragment, null, (0,external_vue_.renderList)(m, function (day, di) {\n              return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", (0,external_vue_.mergeProps)({\n                key: di,\n                class: [$options.prefix('day'), {\n                  selected: day.selected,\n                  empty: day.date == null\n                }, day.attributes.class]\n              }, day.attributes, {\n                disabled: day.disabled,\n                onClick: function onClick($event) {\n                  return $options.selectDay(day);\n                }\n              }), [day.date != null ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(external_vue_.Fragment, {\n                key: 0\n              }, [(0,external_vue_.createElementVNode)(\"span\", {\n                class: (0,external_vue_.normalizeClass)([$options.prefix('day-effect')]),\n                style: (0,external_vue_.normalizeStyle)({\n                  'background-color': $props.color\n                })\n              }, null, 6 /* CLASS, STYLE */), (0,external_vue_.createElementVNode)(\"span\", {\n                class: (0,external_vue_.normalizeClass)([$options.prefix('day-text')])\n              }, (0,external_vue_.toDisplayString)(day.formatted), 3 /* TEXT, CLASS */)], 64 /* STABLE_FRAGMENT */)) : (0,external_vue_.createCommentVNode)(\"v-if\", true)], 16 /* FULL_PROPS */, _hoisted_11);\n            }), 128 /* KEYED_FRAGMENT */))]);\n          }), 128 /* KEYED_FRAGMENT */))]))];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"class\"])], 6 /* CLASS, STYLE */)], 2 /* CLASS */)], 64 /* STABLE_FRAGMENT */)) : ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", _hoisted_12)), (0,external_vue_.createVNode)(external_vue_.Transition, {\n        name: \"fade\"\n      }, {\n        default: (0,external_vue_.withCtx)(function () {\n          return [$options.hasStep('y') ? (0,external_vue_.withDirectives)(((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n            key: 0,\n            ref: \"year\",\n            class: (0,external_vue_.normalizeClass)([$options.prefix('addon-list'), {\n              'can-close': $data.steps.length > 1\n            }])\n          }, [(0,external_vue_.createElementVNode)(\"div\", {\n            class: (0,external_vue_.normalizeClass)([$options.prefix('addon-list-content')])\n          }, [((0,external_vue_.openBlock)(true), (0,external_vue_.createElementBlock)(external_vue_.Fragment, null, (0,external_vue_.renderList)($options.years, function (year, yi) {\n            return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", (0,external_vue_.mergeProps)({\n              key: yi\n            }, year.attributes, {\n              class: [$options.prefix('addon-list-item'), {\n                selected: year.selected\n              }, year.attributes.class],\n              style: [{\n                color: year.selected ? $props.color : ''\n              }, year.attributes.style],\n              disabled: year.disabled,\n              onClick: function onClick($event) {\n                return $options.selectYear(year);\n              }\n            }), (0,external_vue_.toDisplayString)(year.xFormat($props.calendar === 'hijri' ? 'iYYYY' : 'jYYYY')), 17 /* TEXT, FULL_PROPS */, _hoisted_13);\n          }), 128 /* KEYED_FRAGMENT */))], 2 /* CLASS */)], 2 /* CLASS */)), [[external_vue_.vShow, $options.currentStep === 'y']]) : (0,external_vue_.createCommentVNode)(\"v-if\", true)];\n        }),\n        _: 1 /* STABLE */\n      }), (0,external_vue_.createVNode)(external_vue_.Transition, {\n        name: \"fade\"\n      }, {\n        default: (0,external_vue_.withCtx)(function () {\n          return [$options.hasStep('m') ? (0,external_vue_.withDirectives)(((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n            key: 0,\n            ref: \"month\",\n            class: (0,external_vue_.normalizeClass)([$options.prefix('addon-list'), $options.prefix('month-list'), {\n              'can-close': $data.steps.length > 1\n            }])\n          }, [(0,external_vue_.createElementVNode)(\"div\", {\n            class: (0,external_vue_.normalizeClass)([$options.prefix('addon-list-content')])\n          }, [((0,external_vue_.openBlock)(true), (0,external_vue_.createElementBlock)(external_vue_.Fragment, null, (0,external_vue_.renderList)($options.months, function (monthItem, mi) {\n            return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", (0,external_vue_.mergeProps)({\n              key: mi\n            }, monthItem.attributes, {\n              class: [$options.prefix('addon-list-item'), {\n                selected: monthItem.selected\n              }, monthItem.attributes.class],\n              disabled: monthItem.disabled,\n              style: [{\n                color: monthItem.selected ? $props.color : ''\n              }, monthItem.attributes.style],\n              onClick: function onClick($event) {\n                return $options.selectMonth(monthItem);\n              }\n            }), (0,external_vue_.toDisplayString)(monthItem.xFormat($props.calendar === 'hijri' ? 'iMMMM' : 'jMMMM')), 17 /* TEXT, FULL_PROPS */, _hoisted_14);\n          }), 128 /* KEYED_FRAGMENT */))], 2 /* CLASS */)], 2 /* CLASS */)), [[external_vue_.vShow, $options.currentStep === 'm']]) : (0,external_vue_.createCommentVNode)(\"v-if\", true)];\n        }),\n        _: 1 /* STABLE */\n      }), (0,external_vue_.createVNode)(external_vue_.Transition, {\n        name: \"fade\"\n      }, {\n        default: (0,external_vue_.withCtx)(function () {\n          return [$options.hasStep('t') ? (0,external_vue_.withDirectives)(((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n            key: 0,\n            ref: \"time\",\n            class: (0,external_vue_.normalizeClass)([$options.prefix('addon-list'), $options.prefix('time'), {\n              disabled: $options.isDisableTime\n            }])\n          }, [(0,external_vue_.createElementVNode)(\"div\", {\n            class: (0,external_vue_.normalizeClass)([$options.prefix('addon-list-content')])\n          }, [(0,external_vue_.createElementVNode)(\"div\", {\n            class: (0,external_vue_.normalizeClass)([$options.prefix('time-h'), $data.classFastCounter])\n          }, [(0,external_vue_.createVNode)(_component_btn, {\n            class: \"up-arrow-btn\",\n            onUpdate: _cache[8] || (_cache[8] = function ($event) {\n              return $options.setTime(1, 'h');\n            }),\n            onFastUpdate: $options.fastUpdateCounter\n          }, {\n            default: (0,external_vue_.withCtx)(function () {\n              return [(0,external_vue_.createVNode)(_component_arrow, {\n                width: \"20\",\n                direction: \"up\"\n              })];\n            }),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onFastUpdate\"]), (0,external_vue_.createElementVNode)(\"div\", {\n            class: (0,external_vue_.normalizeClass)([\"counter\", $data.directionClassTime]),\n            onMousewheel: _cache[9] || (_cache[9] = (0,external_vue_.withModifiers)(function ($event) {\n              return $options.wheelSetTime('h', $event);\n            }, [\"stop\", \"prevent\"]))\n          }, [((0,external_vue_.openBlock)(true), (0,external_vue_.createElementBlock)(external_vue_.Fragment, null, (0,external_vue_.renderList)($data.time.format('HH').split(''), function (item, i) {\n            return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", (0,external_vue_.mergeProps)({\n              key: \"h__\".concat(i),\n              class: \"counter-item\"\n            }, $options.timeAttributes), [(0,external_vue_.createVNode)(external_vue_.Transition, {\n              name: \"slideY\"\n            }, {\n              default: (0,external_vue_.withCtx)(function () {\n                return [((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"span\", {\n                  key: \"\".concat(item, \"__\").concat(i, \"_h\"),\n                  style: (0,external_vue_.normalizeStyle)({\n                    transition: 'all ' + $data.timeData.transitionSpeed + 'ms ease-in-out'\n                  })\n                }, (0,external_vue_.toDisplayString)(item), 5 /* TEXT, STYLE */))];\n              }),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */)], 16 /* FULL_PROPS */);\n          }), 128 /* KEYED_FRAGMENT */))], 34 /* CLASS, NEED_HYDRATION */), (0,external_vue_.createVNode)(_component_btn, {\n            class: \"down-arrow-btn\",\n            onUpdate: _cache[10] || (_cache[10] = function ($event) {\n              return $options.setTime(-1, 'h');\n            }),\n            onFastUpdate: $options.fastUpdateCounter\n          }, {\n            default: (0,external_vue_.withCtx)(function () {\n              return [(0,external_vue_.createVNode)(_component_arrow, {\n                width: \"20\",\n                direction: \"down\"\n              })];\n            }),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onFastUpdate\"])], 2 /* CLASS */), (0,external_vue_.createElementVNode)(\"div\", {\n            class: (0,external_vue_.normalizeClass)([$options.prefix('time-m'), $data.classFastCounter])\n          }, [(0,external_vue_.createVNode)(_component_btn, {\n            class: \"up-arrow-btn\",\n            onUpdate: _cache[11] || (_cache[11] = function ($event) {\n              return $options.setTime($props.jumpMinute, 'm');\n            }),\n            onFastUpdate: $options.fastUpdateCounter\n          }, {\n            default: (0,external_vue_.withCtx)(function () {\n              return [(0,external_vue_.createVNode)(_component_arrow, {\n                width: \"20\",\n                direction: \"up\"\n              })];\n            }),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onFastUpdate\"]), (0,external_vue_.createElementVNode)(\"div\", {\n            class: (0,external_vue_.normalizeClass)([\"counter\", $data.directionClassTime]),\n            onMousewheel: _cache[12] || (_cache[12] = (0,external_vue_.withModifiers)(function ($event) {\n              return $options.wheelSetTime('m', $event);\n            }, [\"stop\", \"prevent\"]))\n          }, [((0,external_vue_.openBlock)(true), (0,external_vue_.createElementBlock)(external_vue_.Fragment, null, (0,external_vue_.renderList)($data.time.format('mm').split(''), function (item, i) {\n            return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", (0,external_vue_.mergeProps)({\n              key: \"m__\".concat(i),\n              class: \"counter-item\"\n            }, $options.timeAttributes), [(0,external_vue_.createVNode)(external_vue_.Transition, {\n              name: \"slideY\"\n            }, {\n              default: (0,external_vue_.withCtx)(function () {\n                return [((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"span\", {\n                  key: \"\".concat(item, \"__\").concat(i, \"_m\"),\n                  style: (0,external_vue_.normalizeStyle)({\n                    transition: 'all ' + $data.timeData.transitionSpeed + 'ms ease-in-out'\n                  })\n                }, (0,external_vue_.toDisplayString)(item), 5 /* TEXT, STYLE */))];\n              }),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */)], 16 /* FULL_PROPS */);\n          }), 128 /* KEYED_FRAGMENT */))], 34 /* CLASS, NEED_HYDRATION */), (0,external_vue_.createVNode)(_component_btn, {\n            class: \"down-arrow-btn\",\n            onUpdate: _cache[13] || (_cache[13] = function ($event) {\n              return $options.setTime(-$props.jumpMinute, 'm');\n            }),\n            onFastUpdate: $options.fastUpdateCounter\n          }, {\n            default: (0,external_vue_.withCtx)(function () {\n              return [(0,external_vue_.createVNode)(_component_arrow, {\n                width: \"20\",\n                direction: \"down\"\n              })];\n            }),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onFastUpdate\"])], 2 /* CLASS */)], 2 /* CLASS */)], 2 /* CLASS */)), [[external_vue_.vShow, $options.currentStep === 't']]) : (0,external_vue_.createCommentVNode)(\"v-if\", true)];\n        }),\n        _: 1 /* STABLE */\n      }), (0,external_vue_.createVNode)(external_vue_.Transition, {\n        name: \"fade\"\n      }, {\n        default: (0,external_vue_.withCtx)(function () {\n          return [$data.steps.length > 1 && $options.currentStep !== 'd' && $options.hasStep('d') ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"span\", {\n            key: 0,\n            class: (0,external_vue_.normalizeClass)([$options.prefix('close-addon')]),\n            onClick: _cache[14] || (_cache[14] = function ($event) {\n              return $options.goStep('d');\n            })\n          }, \"x\", 2 /* CLASS */)) : (0,external_vue_.createCommentVNode)(\"v-if\", true)];\n        }),\n        _: 1 /* STABLE */\n      }), $props.autoSubmit && !$options.hasStep('t') ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"br\", _hoisted_15)) : ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n        key: 3,\n        class: (0,external_vue_.normalizeClass)([$options.prefix('actions')])\n      }, [(0,external_vue_.createElementVNode)(\"button\", {\n        type: \"button\",\n        disabled: !$options.canSubmit,\n        style: (0,external_vue_.normalizeStyle)({\n          color: $props.color\n        }),\n        onClick: _cache[15] || (_cache[15] = function ($event) {\n          return $options.submit();\n        })\n      }, (0,external_vue_.toDisplayString)($options.lang.submit), 13 /* TEXT, STYLE, PROPS */, _hoisted_16), !$props.inline ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"button\", {\n        key: 0,\n        type: \"button\",\n        style: (0,external_vue_.normalizeStyle)({\n          color: $props.color\n        }),\n        onClick: _cache[16] || (_cache[16] = function ($event) {\n          return $data.visible = false;\n        })\n      }, (0,external_vue_.toDisplayString)($options.lang.cancel), 5 /* TEXT, STYLE */)) : (0,external_vue_.createCommentVNode)(\"v-if\", true), $options.canGoToday ? ((0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"button\", {\n        key: 1,\n        type: \"button\",\n        style: (0,external_vue_.normalizeStyle)({\n          color: $props.color\n        }),\n        onClick: _cache[17] || (_cache[17] = function ($event) {\n          return $options.goToday();\n        })\n      }, (0,external_vue_.toDisplayString)($options.lang.now), 5 /* TEXT, STYLE */)) : (0,external_vue_.createCommentVNode)(\"v-if\", true)], 2 /* CLASS */))], 2 /* CLASS */)], 2 /* CLASS */)], 2 /* CLASS */)], 10 /* CLASS, PROPS */, _hoisted_7)) : (0,external_vue_.createCommentVNode)(\"v-if\", true)];\n    }),\n    _: 1 /* STABLE */\n  })], 10 /* CLASS, PROPS */, _hoisted_1);\n}\n;// CONCATENATED MODULE: ./src/picker/VueDatetimeJs.vue?vue&type=template&id=4d10bd72\n\n// EXTERNAL MODULE: ./src/picker/assets/scss/style.scss\nvar style = __webpack_require__(699);\n;// CONCATENATED MODULE: ./src/picker/modules/utils.js\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n// c = element to scroll to or top position in pixels\n// e = duration of the scroll in ms, time scrolling\n// d = (optative) ease function. Default easeOutCuaic\nfunction scrollTo(a, c, e, d) {\n  d || (d = easeOutCuaic);\n  a = a || document.documentElement;\n  if (0 === a.scrollTop) {\n    var b = a.scrollTop;\n    ++a.scrollTop;\n    a = b + 1 === a.scrollTop-- ? a : document.body;\n  }\n  b = a.scrollTop;\n  0 >= e || ('object' === _typeof(b) && (b = b.offsetTop), 'object' === _typeof(c) && (c = c.offsetTop), function (a, b, c, f, d, e, h) {\n    function g() {\n      0 > f || 1 < f || 0 >= d ? a.scrollTop = c : (a.scrollTop = b - (b - c) * h(f), f += d * e, setTimeout(g, e));\n    }\n    g();\n  }(a, b, c, 0, 1 / e, 20, d));\n}\nfunction easeOutCuaic(t) {\n  t--;\n  return t * t * t + 1;\n}\nvar utils_toString = Object.prototype.toString,\n  utils_hasOwnProperty = Object.prototype.hasOwnProperty;\nvar tools = {\n  isFunction: function isFunction(obj) {\n    return utils_toString.call(obj) === '[object Function]';\n  },\n  isArray: function isArray(obj) {\n    return utils_toString.call(obj) === '[object Array]';\n  },\n  isPlainObject: function isPlainObject(obj) {\n    // Must be an Object.\n    // Because of IE, we also have to check the presence of the constructor property.\n    // Make sure that DOM nodes and window objects don't pass through, as well\n    if (!obj || utils_toString.call(obj) !== '[object Object]' || obj.nodeType || obj.setInterval) {\n      return false;\n    }\n\n    // Not own constructor property must be Object\n    if (obj.constructor && !utils_hasOwnProperty.call(obj, 'constructor') && !utils_hasOwnProperty.call(obj.constructor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n\n    // Own properties are enumerated firstly, so to speed up,\n    // if last one is own, then all properties are own.\n\n    var key;\n    for (key in obj);\n    return key === undefined || utils_hasOwnProperty.call(obj, key);\n  }\n};\n\n/*\n * jQuery extend function\n * https://gist.github.com/bentsai/3150936\n */\nvar extend = function extend() {\n  var options,\n    name,\n    src,\n    copy,\n    copyIsArray,\n    clone,\n    target = arguments[0] || {},\n    i = 1,\n    length = arguments.length,\n    deep = false;\n\n  // Handle a deep copy situation\n  if (typeof target === 'boolean') {\n    deep = target;\n    target = arguments[1] || {};\n    // skip the boolean and the target\n    i = 2;\n  }\n\n  // Handle case when target is a string or something (possible in deep copy)\n  if (_typeof(target) !== 'object' && !tools.isFunction(target)) {\n    target = {};\n  }\n\n  // extend jQuery itself if only one argument is passed\n  if (length === i) {\n    target = this;\n    --i;\n  }\n  for (; i < length; i++) {\n    // Only deal with non-null/undefined values\n    if ((options = arguments[i]) !== null) {\n      // Extend the base object\n      for (name in options) {\n        src = target[name];\n        copy = options[name];\n\n        // Prevent never-ending loop\n        if (target === copy) {\n          continue;\n        }\n\n        // Recurse if we're merging plain objects or arrays\n        if (deep && copy && (tools.isPlainObject(copy) || (copyIsArray = tools.isArray(copy)))) {\n          if (copyIsArray) {\n            copyIsArray = false;\n            clone = src && tools.isArray(src) ? src : [];\n          } else {\n            clone = src && tools.isPlainObject(src) ? src : {};\n          }\n\n          // Never move original objects, clone them\n          target[name] = extend(deep, clone, copy);\n\n          // Don't bring in undefined values\n        } else if (copy !== undefined) {\n          target[name] = copy;\n        }\n      }\n    }\n  }\n\n  // Return the modified object\n  return target;\n};\n/* harmony default export */ var utils = ({\n  scrollTo: scrollTo,\n  extend: extend\n});\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/picker/components/Arrow.vue?vue&type=template&id=64cd1f1b\n\nvar Arrowvue_type_template_id_64cd1f1b_hoisted_1 = [\"fill\"];\nfunction Arrowvue_type_template_id_64cd1f1b_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"svg\", {\n    version: \"1.1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 129 129\",\n    width: \"30\",\n    height: \"30\",\n    perspectiveAspectRato: \"none\",\n    style: (0,external_vue_.normalizeStyle)({\n      transform: \"rotate(\".concat($options.rotation, \"deg)\")\n    })\n  }, [(0,external_vue_.createElementVNode)(\"path\", {\n    fill: $props.fill,\n    d: \"M88.6 121.3c.8.8 1.8 1.2 2.9 1.2s2.1-.4 2.9-1.2a4.1 4.1 0 0 0 0-5.8l-51-51 51-51a4.1 4.1 0 0 0-5.8-5.8l-54\\n      53.9a4.1 4.1 0 0 0 0 5.8l54 53.9z\"\n  }, null, 8 /* PROPS */, Arrowvue_type_template_id_64cd1f1b_hoisted_1)], 4 /* STYLE */);\n}\n;// CONCATENATED MODULE: ./src/picker/components/Arrow.vue?vue&type=template&id=64cd1f1b\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/picker/components/Arrow.vue?vue&type=script&lang=js\n/* harmony default export */ var Arrowvue_type_script_lang_js = ({\n  props: {\n    fill: {\n      type: String,\n      default: '#a2a2a2'\n    },\n    direction: {\n      type: String,\n      default: 'up'\n    }\n  },\n  computed: {\n    rotation: function rotation() {\n      return {\n        up: 90,\n        left: 0,\n        right: 180,\n        down: -90\n      }[this.direction];\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/picker/components/Arrow.vue?vue&type=script&lang=js\n \n// EXTERNAL MODULE: ./node_modules/vue-loader/dist/exportHelper.js\nvar exportHelper = __webpack_require__(262);\n;// CONCATENATED MODULE: ./src/picker/components/Arrow.vue\n\n\n\n\n;\nconst __exports__ = /*#__PURE__*/(0,exportHelper/* default */.A)(Arrowvue_type_script_lang_js, [['render',Arrowvue_type_template_id_64cd1f1b_render]])\n\n/* harmony default export */ var Arrow = (__exports__);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/picker/components/Btn.vue?vue&type=template&id=0c5a542b\n\nfunction Btnvue_type_template_id_0c5a542b_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"div\", {\n    onMousedown: _cache[0] || (_cache[0] = function () {\n      return $options.down && $options.down.apply($options, arguments);\n    }),\n    onTouchstart: _cache[1] || (_cache[1] = function () {\n      return $options.down && $options.down.apply($options, arguments);\n    }),\n    onMouseup: _cache[2] || (_cache[2] = function () {\n      return $options.click && $options.click.apply($options, arguments);\n    })\n  }, [(0,external_vue_.renderSlot)(_ctx.$slots, \"default\")], 32 /* NEED_HYDRATION */);\n}\n;// CONCATENATED MODULE: ./src/picker/components/Btn.vue?vue&type=template&id=0c5a542b\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/picker/components/Btn.vue?vue&type=script&lang=js\n/* harmony default export */ var Btnvue_type_script_lang_js = ({\n  data: function data() {\n    return {\n      interval: false,\n      timeout: false,\n      intervalDelay: 150\n    };\n  },\n  computed: {},\n  mounted: function mounted() {\n    var _this = this;\n    document.addEventListener('mouseup', function () {\n      if (_this.timeout || _this.interval) _this.up();\n    });\n    document.addEventListener('touchend', function () {\n      if (_this.timeout || _this.interval) _this.up();\n    });\n  },\n  methods: {\n    click: function click() {\n      if (!this.interval) {\n        this.$emit('update', 1);\n      }\n    },\n    down: function down() {\n      var _this2 = this;\n      window.clearTimeout(this.timeout);\n      window.clearInterval(this.interval);\n      this.interval = false;\n      this.timeout = window.setTimeout(function () {\n        _this2.intervalFn();\n      }, 600);\n    },\n    up: function up() {\n      window.clearTimeout(this.timeout);\n      window.clearInterval(this.interval);\n      this.$emit('fastUpdate', false);\n      this.timeout = false;\n      this.interval = false;\n      this.intervalDelay = 150;\n    },\n    intervalFn: function intervalFn() {\n      var _this3 = this;\n      this.interval = window.setTimeout(function () {\n        _this3.$emit('update', 1);\n        _this3.$emit('fastUpdate', true);\n        _this3.intervalFn();\n        if (_this3.intervalDelay > 30) _this3.intervalDelay -= 3;\n      }, this.intervalDelay);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/picker/components/Btn.vue?vue&type=script&lang=js\n \n;// CONCATENATED MODULE: ./src/picker/components/Btn.vue\n\n\n\n\n;\nconst Btn_exports_ = /*#__PURE__*/(0,exportHelper/* default */.A)(Btnvue_type_script_lang_js, [['render',Btnvue_type_template_id_0c5a542b_render]])\n\n/* harmony default export */ var Btn = (Btn_exports_);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/picker/components/CalendarIcon.vue?vue&type=template&id=66b1c474\n\nvar CalendarIconvue_type_template_id_66b1c474_hoisted_1 = [\"fill\"];\nvar CalendarIconvue_type_template_id_66b1c474_hoisted_2 = /*#__PURE__*/(0,external_vue_.createElementVNode)(\"path\", {\n  d: \"M436 160H12C5.4 160 0 154.6 0 148V112C0 85.5 21.5 64 48 64H96V12C96 5.4 101.4 0 108 0H148C154.6 0 160 5.4 160\\n      12V64H288V12C288 5.4 293.4 0 300 0H340C346.6 0 352 5.4 352 12V64H400C426.5 64 448 85.5 448 112V148C448 154.6\\n      442.6 160 436 160zM12 192H436C442.6 192 448 197.4 448 204V464C448 490.5 426.5 512 400 512H48C21.5 512 0 490.5 0\\n      464V204C0 197.4 5.4 192 12 192zM128 396C128 389.4 122.6 384 116 384H76C69.4 384 64 389.4 64 396V436C64 442.6 69.4\\n      448 76 448H116C122.6 448 128 442.6 128 436V396zM128 268C128 261.4 122.6 256 116 256H76C69.4 256 64 261.4 64\\n      268V308C64 314.6 69.4 320 76 320H116C122.6 320 128 314.6 128 308V268zM256 396C256 389.4 250.6 384 244\\n      384H204C197.4 384 192 389.4 192 396V436C192 442.6 197.4 448 204 448H244C250.6 448 256 442.6 256 436V396zM256\\n      268C256 261.4 250.6 256 244 256H204C197.4 256 192 261.4 192 268V308C192 314.6 197.4 320 204 320H244C250.6 320 256\\n      314.6 256 308V268zM384 396C384 389.4 378.6 384 372 384H332C325.4 384 320 389.4 320 396V436C320 442.6 325.4 448\\n      332 448H372C378.6 448 384 442.6 384 436V396zM384 268C384 261.4 378.6 256 372 256H332C325.4 256 320 261.4 320\\n      268V308C320 314.6 325.4 320 332 320H372C378.6 320 384 314.6 384 308V268z\"\n}, null, -1 /* HOISTED */);\nvar CalendarIconvue_type_template_id_66b1c474_hoisted_3 = [CalendarIconvue_type_template_id_66b1c474_hoisted_2];\nfunction CalendarIconvue_type_template_id_66b1c474_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"svg\", {\n    version: \"1.1\",\n    width: \"14\",\n    height: \"16\",\n    viewBox: \"0 0 448 512\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: $props.fill\n  }, CalendarIconvue_type_template_id_66b1c474_hoisted_3, 8 /* PROPS */, CalendarIconvue_type_template_id_66b1c474_hoisted_1);\n}\n;// CONCATENATED MODULE: ./src/picker/components/CalendarIcon.vue?vue&type=template&id=66b1c474\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/picker/components/CalendarIcon.vue?vue&type=script&lang=js\n/* harmony default export */ var CalendarIconvue_type_script_lang_js = ({\n  props: {\n    fill: {\n      type: String,\n      default: '#f9f9f9'\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/picker/components/CalendarIcon.vue?vue&type=script&lang=js\n \n;// CONCATENATED MODULE: ./src/picker/components/CalendarIcon.vue\n\n\n\n\n;\nconst CalendarIcon_exports_ = /*#__PURE__*/(0,exportHelper/* default */.A)(CalendarIconvue_type_script_lang_js, [['render',CalendarIconvue_type_template_id_66b1c474_render]])\n\n/* harmony default export */ var CalendarIcon = (CalendarIcon_exports_);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/picker/components/TimeIcon.vue?vue&type=template&id=18ace668\n\nvar TimeIconvue_type_template_id_18ace668_hoisted_1 = [\"fill\"];\nvar TimeIconvue_type_template_id_18ace668_hoisted_2 = /*#__PURE__*/(0,external_vue_.createElementVNode)(\"path\", {\n  d: \"M256 8C119 8 8 119 8 256S119 504 256 504 504 393 504 256 393 8 256 8zM313.1 358.1L224.9 294C221.8 291.7 220\\n      288.1 220 284.3V116C220 109.4 225.4 104 232 104H280C286.6 104 292 109.4 292 116V253.7L355.5 299.9C360.9 303.8\\n      362 311.3 358.1 316.7L329.9 355.5C326 360.8 318.5 362 313.1 358.1z\"\n}, null, -1 /* HOISTED */);\nvar TimeIconvue_type_template_id_18ace668_hoisted_3 = [TimeIconvue_type_template_id_18ace668_hoisted_2];\nfunction TimeIconvue_type_template_id_18ace668_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (0,external_vue_.openBlock)(), (0,external_vue_.createElementBlock)(\"svg\", {\n    version: \"1.1\",\n    role: \"presentation\",\n    width: \"16\",\n    height: \"16\",\n    fill: $props.fill,\n    viewBox: \"0 0 512 512\"\n  }, TimeIconvue_type_template_id_18ace668_hoisted_3, 8 /* PROPS */, TimeIconvue_type_template_id_18ace668_hoisted_1);\n}\n;// CONCATENATED MODULE: ./src/picker/components/TimeIcon.vue?vue&type=template&id=18ace668\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/picker/components/TimeIcon.vue?vue&type=script&lang=js\n/* harmony default export */ var TimeIconvue_type_script_lang_js = ({\n  props: {\n    fill: {\n      type: String,\n      default: '#f9f9f9'\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/picker/components/TimeIcon.vue?vue&type=script&lang=js\n \n;// CONCATENATED MODULE: ./src/picker/components/TimeIcon.vue\n\n\n\n\n;\nconst TimeIcon_exports_ = /*#__PURE__*/(0,exportHelper/* default */.A)(TimeIconvue_type_script_lang_js, [['render',TimeIconvue_type_template_id_18ace668_render]])\n\n/* harmony default export */ var TimeIcon = (TimeIcon_exports_);\n// EXTERNAL MODULE: external \"moment-jalaali\"\nvar external_moment_jalaali_ = __webpack_require__(239);\nvar external_moment_jalaali_default = /*#__PURE__*/__webpack_require__.n(external_moment_jalaali_);\n// EXTERNAL MODULE: ./node_modules/moment-hijri/moment-hijri.js\nvar moment_hijri = __webpack_require__(243);\nvar moment_hijri_default = /*#__PURE__*/__webpack_require__.n(moment_hijri);\n;// CONCATENATED MODULE: ./src/picker/modules/moment.locale.fa.js\n//! moment.js locale configuration\n\nvar symbolMap = {\n    '1': '۱',\n    '2': '۲',\n    '3': '۳',\n    '4': '۴',\n    '5': '۵',\n    '6': '۶',\n    '7': '۷',\n    '8': '۸',\n    '9': '۹',\n    '0': '۰'\n  },\n  numberMap = {\n    '۱': '1',\n    '۲': '2',\n    '۳': '3',\n    '۴': '4',\n    '۵': '5',\n    '۶': '6',\n    '۷': '7',\n    '۸': '8',\n    '۹': '9',\n    '۰': '0'\n  };\n/* harmony default export */ var moment_locale_fa = ({\n  months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),\n  monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),\n  weekdays: \"\\u06CC\\u06A9\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062F\\u0648\\u0634\\u0646\\u0628\\u0647_\\u0633\\u0647\\u200C\\u0634\\u0646\\u0628\\u0647_\\u0686\\u0647\\u0627\\u0631\\u0634\\u0646\\u0628\\u0647_\\u067E\\u0646\\u062C\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062C\\u0645\\u0639\\u0647_\\u0634\\u0646\\u0628\\u0647\".split('_'),\n  weekdaysShort: \"\\u06CC\\u06A9\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062F\\u0648\\u0634\\u0646\\u0628\\u0647_\\u0633\\u0647\\u200C\\u0634\\u0646\\u0628\\u0647_\\u0686\\u0647\\u0627\\u0631\\u0634\\u0646\\u0628\\u0647_\\u067E\\u0646\\u062C\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062C\\u0645\\u0639\\u0647_\\u0634\\u0646\\u0628\\u0647\".split('_'),\n  weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd, D MMMM YYYY HH:mm'\n  },\n  meridiemParse: /قبل از ظهر|بعد از ظهر/,\n  isPM: function isPM(input) {\n    return /بعد از ظهر/.test(input);\n  },\n  meridiem: function meridiem(hour) {\n    if (hour < 12) {\n      return 'قبل از ظهر';\n    } else {\n      return 'بعد از ظهر';\n    }\n  },\n  calendar: {\n    sameDay: '[امروز ساعت] LT',\n    nextDay: '[فردا ساعت] LT',\n    nextWeek: 'dddd [ساعت] LT',\n    lastDay: '[دیروز ساعت] LT',\n    lastWeek: 'dddd [پیش] [ساعت] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'در %s',\n    past: '%s پیش',\n    s: 'چند ثانیه',\n    ss: 'ثانیه d%',\n    m: 'یک دقیقه',\n    mm: '%d دقیقه',\n    h: 'یک ساعت',\n    hh: '%d ساعت',\n    d: 'یک روز',\n    dd: '%d روز',\n    M: 'یک ماه',\n    MM: '%d ماه',\n    y: 'یک سال',\n    yy: '%d سال'\n  },\n  preparse: function preparse(string) {\n    return string.replace(/[۰-۹]/g, function (match) {\n      return numberMap[match];\n    }).replace(/،/g, ',');\n  },\n  postformat: function postformat(string) {\n    return string.replace(/\\d/g, function (match) {\n      return symbolMap[match];\n    }).replace(/,/g, '،');\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}م/,\n  ordinal: '%dم',\n  week: {\n    dow: 6,\n    // Saturday is the first day of the week.\n    doy: 12 // The week that contains Jan 1st is the first week of the year.\n  }\n});\n;// CONCATENATED MODULE: ./src/picker/modules/moment.locale.fr.js\n//! moment.js locale configuration\n\n/* harmony default export */ var moment_locale_fr = ({\n  months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),\n  monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),\n  monthsParseExact: true,\n  weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),\n  weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),\n  weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd D MMMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[Aujourd’hui à] LT',\n    nextDay: '[Demain à] LT',\n    nextWeek: 'dddd [à] LT',\n    lastDay: '[Hier à] LT',\n    lastWeek: 'dddd [dernier à] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'dans %s',\n    past: 'il y a %s',\n    s: 'quelques secondes',\n    ss: '%d secondes',\n    m: 'une minute',\n    mm: '%d minutes',\n    h: 'une heure',\n    hh: '%d heures',\n    d: 'un jour',\n    dd: '%d jours',\n    M: 'un mois',\n    MM: '%d mois',\n    y: 'un an',\n    yy: '%d ans'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}(er|)/,\n  ordinal: function ordinal(number, period) {\n    switch (period) {\n      // TODO: Return 'e' when day of month > 1. Move this case inside\n      // block for masculine words below.\n      // See https://github.com/moment/moment/issues/3375\n      case 'D':\n        return number + (number === 1 ? 'er' : '');\n\n      // Words with masculine grammatical gender: mois, trimestre, jour\n      default:\n      case 'M':\n      case 'Q':\n      case 'DDD':\n      case 'd':\n        return number + (number === 1 ? 'er' : 'e');\n\n      // Words with feminine grammatical gender: semaine\n      case 'w':\n      case 'W':\n        return number + (number === 1 ? 're' : 'e');\n    }\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n  }\n});\n;// CONCATENATED MODULE: ./src/picker/modules/moment.locale.ka.js\n//! moment.js locale configuration\n\n/* harmony default export */ var moment_locale_ka = ({\n  months: {\n    standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),\n    format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')\n  },\n  monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),\n  weekdays: {\n    standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),\n    format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),\n    isFormat: /(წინა|შემდეგ)/\n  },\n  weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),\n  weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),\n  longDateFormat: {\n    LT: 'h:mm A',\n    LTS: 'h:mm:ss A',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY h:mm A',\n    LLLL: 'dddd, D MMMM YYYY h:mm A'\n  },\n  calendar: {\n    sameDay: '[დღეს] LT[-ზე]',\n    nextDay: '[ხვალ] LT[-ზე]',\n    lastDay: '[გუშინ] LT[-ზე]',\n    nextWeek: '[შემდეგ] dddd LT[-ზე]',\n    lastWeek: '[წინა] dddd LT-ზე',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: function future(s) {\n      return /(წამი|წუთი|საათი|წელი)/.test(s) ? s.replace(/ი$/, 'ში') : s + 'ში';\n    },\n    past: function past(s) {\n      if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {\n        return s.replace(/(ი|ე)$/, 'ის წინ');\n      }\n      if (/წელი/.test(s)) {\n        return s.replace(/წელი$/, 'წლის წინ');\n      }\n    },\n    s: 'რამდენიმე წამი',\n    ss: '%d წამი',\n    m: 'წუთი',\n    mm: '%d წუთი',\n    h: 'საათი',\n    hh: '%d საათი',\n    d: 'დღე',\n    dd: '%d დღე',\n    M: 'თვე',\n    MM: '%d თვე',\n    y: 'წელი',\n    yy: '%d წელი'\n  },\n  dayOfMonthOrdinalParse: /0|1-ლი|მე-\\d{1,2}|\\d{1,2}-ე/,\n  ordinal: function ordinal(number) {\n    if (number === 0) {\n      return number;\n    }\n    if (number === 1) {\n      return number + '-ლი';\n    }\n    if (number < 20 || number <= 100 && number % 20 === 0 || number % 100 === 0) {\n      return 'მე-' + number;\n    }\n    return number + '-ე';\n  },\n  week: {\n    dow: 1,\n    doy: 7\n  }\n});\n;// CONCATENATED MODULE: ./src/picker/modules/moment.locale.ar-sa.js\n//! moment.js locale configuration\n\nvar moment_locale_ar_sa_symbolMap = {\n    '1': '١',\n    '2': '٢',\n    '3': '٣',\n    '4': '٤',\n    '5': '٥',\n    '6': '٦',\n    '7': '٧',\n    '8': '٨',\n    '9': '٩',\n    '0': '٠'\n  },\n  moment_locale_ar_sa_numberMap = {\n    '١': '1',\n    '٢': '2',\n    '٣': '3',\n    '٤': '4',\n    '٥': '5',\n    '٦': '6',\n    '٧': '7',\n    '٨': '8',\n    '٩': '9',\n    '٠': '0'\n  };\n/* harmony default export */ var moment_locale_ar_sa = ({\n  months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),\n  monthsShort: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),\n  weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n  weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),\n  weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),\n  weekdaysParseExact: true,\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd D MMMM YYYY HH:mm'\n  },\n  meridiemParse: /ص|م/,\n  isPM: function isPM(input) {\n    return 'م' === input;\n  },\n  meridiem: function meridiem(hour, minute, isLower) {\n    if (hour < 12) {\n      return 'ص';\n    } else {\n      return 'م';\n    }\n  },\n  calendar: {\n    sameDay: '[اليوم على الساعة] LT',\n    nextDay: '[غدا على الساعة] LT',\n    nextWeek: 'dddd [على الساعة] LT',\n    lastDay: '[أمس على الساعة] LT',\n    lastWeek: 'dddd [على الساعة] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'في %s',\n    past: 'منذ %s',\n    s: 'ثوان',\n    ss: '%d ثانية',\n    m: 'دقيقة',\n    mm: '%d دقائق',\n    h: 'ساعة',\n    hh: '%d ساعات',\n    d: 'يوم',\n    dd: '%d أيام',\n    M: 'شهر',\n    MM: '%d أشهر',\n    y: 'سنة',\n    yy: '%d سنوات'\n  },\n  // preparse: function(string) {\n  //   return string\n  //     .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(match) {\n  //       return numberMap[match]\n  //     })\n  //     .replace(/،/g, ',')\n  // },\n  // postformat: function(string) {\n  //   return string\n  //     .replace(/\\d/g, function(match) {\n  //       return symbolMap[match]\n  //     })\n  //     .replace(/,/g, '،')\n  // },\n  week: {\n    dow: 0,\n    // Sunday is the first day of the week.\n    doy: 6 // The week that contains Jan 6th is the first week of the year.\n  }\n});\n;// CONCATENATED MODULE: ./src/picker/modules/core.js\n/*global getYear*/\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\n\n\n\n\n\n\n\n// jmoment.updateLocale('en', {\n//   weekdaysMin: 'S_M_T_W_T_F_S'.split('_')\n// })\n\nexternal_moment_jalaali_default().updateLocale('fa', moment_locale_fa);\nexternal_moment_jalaali_default().updateLocale('fr', moment_locale_fr);\nexternal_moment_jalaali_default().updateLocale('ka', moment_locale_ka);\nmoment_hijri_default().updateLocale('ar-sa', moment_locale_ar_sa);\nexternal_moment_jalaali_default().loadPersian({\n  dialect: 'persian-modern'\n});\n(external_moment_jalaali_default()).daysInMonth = function (year, month) {\n  return external_moment_jalaali_default()({\n    year: year,\n    month: month\n  }).daysInMonth();\n};\n(moment_hijri_default()).daysInMonth = function (year, month) {\n  return moment_hijri_default()({\n    year: year,\n    month: month\n  }).daysInMonth();\n};\n\n//=====================================\n//           CONFIG\n//=====================================\nvar localMethods = {\n  jalali: {\n    daysInMonth: 'jDaysInMonth',\n    year: 'jYear',\n    month: 'jMonth',\n    date: 'jDate',\n    day: 'day'\n  },\n  gregory: {\n    daysInMonth: 'daysInMonth',\n    year: 'year',\n    month: 'month',\n    date: 'date',\n    day: 'day'\n  },\n  hijri: {\n    daysInMonth: 'iDaysInMonth',\n    year: 'iYear',\n    month: 'iMonth',\n    date: 'iDate',\n    day: 'day'\n  }\n};\nvar localesConfig = {\n  jalali: {\n    dow: 6,\n    dir: 'rtl',\n    displayFormat: null,\n    lang: {\n      label: 'شمسی',\n      submit: 'تایید',\n      cancel: 'انصراف',\n      now: 'اکنون',\n      nextMonth: 'ماه بعد',\n      prevMonth: 'ماه قبل'\n    }\n  },\n  gregory: {\n    dow: 0,\n    dir: 'ltr',\n    displayFormat: null,\n    lang: {\n      label: 'میلادی',\n      submit: 'Select',\n      cancel: 'Cancel',\n      now: 'Now',\n      nextMonth: 'Next month',\n      prevMonth: 'Previous month'\n    }\n  },\n  hijri: {\n    dow: 6,\n    dir: 'rtl',\n    displayFormat: null,\n    lang: {\n      label: 'قمری',\n      submit: 'حسنا',\n      cancel: 'إلغاء',\n      now: 'الآن',\n      nextMonth: 'الشهر القادم',\n      prevMonth: 'الشهر السابق'\n    }\n  }\n};\nvar Core = function Core(defaultCalendarName, defaultLocaleName) {\n  'use strict';\n\n  var Instance = {\n    moment: defaultCalendarName === 'hijri' ? (moment_hijri_default()) : (external_moment_jalaali_default()),\n    calendar: defaultCalendarName,\n    locale: {\n      name: defaultLocaleName,\n      config: {}\n    },\n    localesConfig: {},\n    setLocalesConfig: null,\n    changeLocale: null,\n    getWeekArray: null,\n    getYearsList: null,\n    getMonthsList: null\n  };\n\n  //=====================================\n  //           METHODS\n  //=====================================\n  var xDaysInMonth;\n  Instance.changeLocale = function changeLocale() {\n    var localeCalendar = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'gregory';\n    var localeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var calendar = this.calendar;\n    var locale = this.locale;\n    var config = JSON.parse(JSON.stringify(localesConfig[localeCalendar] || localesConfig.gregory));\n    var methods = localMethods[localeCalendar] || localMethods.gregory;\n    options = options[localeCalendar] || {};\n    locale.name = localeName;\n    locale.config = utils.extend(true, config, options);\n    var moment = calendar === 'hijri' ? (moment_hijri_default()) : (external_moment_jalaali_default());\n    xDaysInMonth = moment[methods.daysInMonth];\n    function addMethods(date) {\n      if (date === undefined) return;\n      var nameInLocale = function nameInLocale(name) {\n        if (calendar === 'hijri') name = name.replace(/j/g, 'i');else if (calendar !== 'jalali') name = name.replace(/j/g, '');\n        return name;\n      };\n      date.xYear = moment.fn[methods.year];\n      date.xMonth = moment.fn[methods.month];\n      date.xDate = moment.fn[methods.date];\n      date.xFormat = function (format) {\n        return this.format(nameInLocale(format));\n      };\n      date.xStartOf = function (value) {\n        return this.startOf(methods[value]);\n      };\n      date.xEndOf = function (value) {\n        return this.endOf(methods[value]);\n      };\n      date.xAdd = function (amount, key) {\n        return this.add(amount, methods[key]);\n      };\n      date.clone = function () {\n        return Instance.moment(this.toDate());\n      };\n    }\n    this.moment = function () {\n      var date = moment.apply(null, arguments);\n      date.locale(locale.name);\n      addMethods(date);\n      return date;\n    };\n  };\n  Instance.setLocalesConfig = function (config) {\n    var defaults = JSON.parse(JSON.stringify(localesConfig));\n    this.localesConfig = utils.extend(true, defaults, config);\n  };\n  Instance.getWeekArray = function getWeekArray(d) {\n    var _this = this;\n    function addWeek(weekArray, week) {\n      var emptyDays = 7 - week.length;\n      for (var i = 0; i < emptyDays; ++i) {\n        week[weekArray.length ? 'push' : 'unshift'](null);\n      }\n      weekArray.push(week);\n    }\n    var moment = this.moment;\n    var daysInMonth = xDaysInMonth(moment(d).xYear(), moment(d).xMonth());\n    var dayArray = [];\n    for (var i = 1; i <= daysInMonth; i++) {\n      dayArray.push(moment(d).xDate(i).toDate());\n    }\n    var weekArray = [];\n    var week = [];\n    dayArray.forEach(function (day) {\n      if (week.length > 0 && day.getDay() === _this.locale.config.dow) {\n        addWeek(weekArray, week);\n        week = [];\n      }\n      week.push(day);\n      if (dayArray.indexOf(day) === dayArray.length - 1) {\n        addWeek(weekArray, week);\n      }\n    });\n    return weekArray;\n  };\n  Instance.getYearsList = function getYearsList(from, to) {\n    var range = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var date = arguments.length > 3 ? arguments[3] : undefined;\n    var years = [];\n    if (range) {\n      var year = getYear(date);\n      from = year - range;\n      to = year + range;\n    }\n    for (var i = from; i <= to; i++) {\n      years.push(i);\n    }\n    return years;\n  };\n  Instance.getMonthsList = function getMonthsList(minDate, maxDate, date) {\n    var list = [],\n      min = minDate ? minDate.clone().xStartOf('month').unix() : -Infinity,\n      max = maxDate ? maxDate.clone().xEndOf('month').unix() : Infinity;\n    for (var i = 0; i < 12; i++) {\n      var month = date.clone().xMonth(i);\n      var start = month.clone().xStartOf('month').unix();\n      var end = month.clone().xEndOf('month').unix();\n      month.disabled = start < min || end > max;\n      list.push(month);\n    }\n    return list;\n  };\n  Instance.changeLocale(defaultCalendarName, defaultLocaleName);\n  return Instance;\n};\n/* harmony default export */ var core = (Core);\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/picker/VueDatetimeJs.vue?vue&type=script&lang=js\nfunction VueDatetimeJsvue_type_script_lang_js_typeof(o) { \"@babel/helpers - typeof\"; return VueDatetimeJsvue_type_script_lang_js_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, VueDatetimeJsvue_type_script_lang_js_typeof(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == VueDatetimeJsvue_type_script_lang_js_typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != VueDatetimeJsvue_type_script_lang_js_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != VueDatetimeJsvue_type_script_lang_js_typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n\n\n\n/* harmony default export */ var VueDatetimeJsvue_type_script_lang_js = ({\n  components: {\n    Arrow: Arrow,\n    Btn: Btn,\n    CalendarIcon: CalendarIcon,\n    TimeIcon: TimeIcon\n  },\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: {\n    /**\n     * Default input value\n     * @type Number String\n     * @default []\n     * @example 1396/08/01 22:45 | 2017/07/07 20:45 | {unix} | 20:45\n     */\n    value: {\n      type: [Number, String],\n      default: ''\n    },\n    /**\n     * Initial value of picker (if value is empty)\n     * @type Number String\n     * @default []\n     * @example 1370/01/01 22:45 | 2017/01/01 20:45 | {unix} | 20:45\n     * @version 1.0.9\n     */\n    initialValue: {\n      type: [Number, String],\n      default: ''\n    },\n    /**\n     * Format for {value}\n     * @type String\n     * @default Null\n     * @example jYYYY/jMM/jDD HH:mm | YYYY/MM/DD HH:mm | x | unix | HH:mm\n     * @if empty {inputFormat} = {format}\n     * @see https://github.com/jalaali/moment-jalaali\n     */\n    inputFormat: {\n      type: String,\n      default: ''\n    },\n    /**\n     * Format only to display the date in the field\n     * @type String\n     * @default Null\n     * @example jYYYY/jMM/jDD HH:mm | YYYY/MM/DD HH:mm | x | unix | HH:mm\n     * @if empty {displayFormat} = {format}\n     * @see https://github.com/jalaali/moment-jalaali\n     */\n    displayFormat: {\n      type: String,\n      default: ''\n    },\n    /**\n     * Format for output value\n     * @type String\n     * @default Null\n     * @example jYYYY/jMM/jDD HH:mm | YYYY/MM/DD HH:mm | x | unix | HH:mm\n     * @if empty, it will be built according to the type of picker:\n     *\n     * --- time:     HH:mm\n     * --- datetime: jYYYY/jMM/jDD HH:mm\n     * --- date:     jYYYY/jMM/jDD\n     * --- year:     jYYYY\n     * --- month:    jMM\n     *\n     * @see https://github.com/jalaali/moment-jalaali\n     */\n    format: {\n      type: String,\n      default: ''\n    },\n    /**\n     * Step to view on startup\n     * @type String\n     * @default \"day\"\n     * @supported day | month | year | time\n     * @example year\n     * @desc {year} will show the \"year\" panel at first\n     */\n    view: {\n      type: String,\n      default: 'day'\n    },\n    /**\n     * The picker type\n     * @type String\n     * @default \"date\"\n     * @supported date | datetime | year | month | time\n     */\n    type: {\n      type: String,\n      default: 'date'\n    },\n    /**\n     * The minimum of selectable period\n     * Based on {inputFormat}\n     * @type String\n     * @default Null\n     * @example 1396/08/01 22:45 | 22:45\n     */\n    min: {\n      type: [String],\n      default: ''\n    },\n    /**\n     * The maximum of selectable period\n     * Based on {inputFormat}\n     * @type String\n     * @default Null\n     * @example 1396/08/01 22:45 | 22:45\n     */\n    max: {\n      type: [String],\n      default: ''\n    },\n    /**\n     * Editable input or just readonly\n     * @type Boolean\n     * @default False\n     * @if false, the picker will shown on input focus\n     * @if true, the picker will shown on label click\n     * @note if use <... :editable=\"true\"> with <... :element=\"...\">\n     *     then you have to control the <... :show=\"true or false\">\n     */\n    editable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * The specified input element ID\n     * @type String\n     * @default Undefined\n     * @desc Sometimes you don't want to use picker default input,\n     * so you can use our own input element with \"id\" attribute\n     * and use <... element=\"the_id_of_input\">\n     */\n    element: {\n      type: String,\n      default: undefined\n    },\n    /**\n     * The form input name when not using {element}\n     * @type String\n     * @default Undefined\n     */\n    name: {\n      type: String,\n      default: undefined\n    },\n    /**\n     * The form input className when not using {element}\n     * @type String\n     * @default \"form-control\"\n     */\n    inputClass: {\n      type: String,\n      default: 'form-control'\n    },\n    /**\n     * The form input placeholder when not using {element}\n     * @type String\n     * @default Null\n     */\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    /**\n     * The name of hidden input element\n     * @type String\n     * @default Null\n     * @if empty, the hidden input will not be created\n     */\n    altName: {\n      type: String,\n      default: ''\n    },\n    /**\n     * Format for hidden input\n     * @type String\n     * @default Null\n     * @example YYYY-MM-DD HH:mm:ss [GMT]ZZ\n     * @if empty, it will be built according to the type of picker:\n     *\n     * --- time:     HH:mm:ss [GMT]ZZ\n     * --- datetime: YYYY-MM-DD HH:mm:ss [GMT]ZZ\n     * --- date:     YYYY-MM-DD\n     * --- year:     YYYY\n     * --- month:    MM\n     */\n    altFormat: {\n      type: String,\n      default: ''\n    },\n    /**\n     * Show or hide the picker\n     * @type Boolean\n     * @default False\n     */\n    show: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Primary color of picker\n     * @type String\n     */\n    color: {\n      type: String,\n      default: '#417df4'\n    },\n    /**\n     * Auto submit and hide picker when date selected\n     * @type Boolean\n     * @default False\n     */\n    autoSubmit: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Auto submit when clicking the wrapper\n     * @type Boolean\n     * @default false\n     * @version 1.0.6\n     */\n    wrapperSubmit: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Place to append picker\n     * @type String query selector\n     * @default null\n     * @desc If you want to append picker to another container like 'body',\n     * pass the container as append-to=\"body\",  append-to=\"#app\",  append-to=\"#my-container\"\n     * @example 'body', '.main-container', '#app' ...\n     * @version 1.1.1\n     */\n    appendTo: {\n      type: String,\n      default: null\n    },\n    /**\n     * Disable or enable the datepicker\n     * @type Boolean\n     * @default false\n     * @version 1.1.4\n     */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Disabling\n     * @type Array, String, Function, RegExp\n     * @default undefined\n     * @desc disable some dates\n     * @example ['1397/02/02', '1390/10/10'] - \"1397/05/20\" - /1397\\/05\\/(.*)/ ...\n     * @version 1.1.4\n     */\n    disable: {\n      type: [Array, String, Function, RegExp],\n      default: undefined\n    },\n    /**\n     * Label\n     * @type String\n     * @version 1.1.4\n     */\n    label: {\n      type: String,\n      default: ''\n    },\n    /**\n     * Highlight items\n     * @type Function\n     * @desc This prop accepts only function that return an object of attributes.\n     * @version 1.1.5\n     */\n    highlight: {\n      type: Function,\n      default: null\n    },\n    /**\n     * Change minutes by step\n     * @type Number\n     * @default 1\n     * @version: 1.1.6\n     */\n    jumpMinute: {\n      type: Number,\n      default: 1\n    },\n    /**\n     * Round minutes when jumpMinute is grater than 1\n     * @example when jumpMinute = 15 thin will result: 13:00, 13:15, 13:30, 13:45 ...\n     * @type Boolean\n     * @default false\n     * @version: 1.1.6\n     */\n    roundMinute: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Show clear button\n     * @type Boolean\n     * @default false\n     * @version 1.1.6\n     */\n    clearable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Inline mode\n     * @type Boolean\n     * @default false\n     * @version 1.1.6\n     */\n    inline: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Locales language config\n     * @type String\n     * @default en\n     * @example en\n     * @supported fa,en,fr,ar-sa\n     * @version 2.0.0\n     */\n    locale: {\n      type: String,\n      default: 'en'\n    },\n    /**\n     * Calendar type (gregory, jalali, hijri)\n     * @type String\n     * @default gregory\n     * @example gregory\n     * @supported gregory,jalali,hijri\n     * @version 1.2.0\n     */\n    calendar: {\n      type: String,\n      default: 'gregory'\n    },\n    /**\n     * Locale configuration\n     * @type Object\n     * @default {}\n     * @version 2.0.0\n     * @example\n     * {\n     *  fa: {\n     *      dow: 6,             --first day of week\n     *      dir: 'rtl',         --language direction\n     *      lang: {\n     *           label:     \"شمسی\",\n     *           submit:    \"تایید\",\n     *           cancel:    \"انصراف\",\n     *           now:       \"اکنون\",\n     *           nextMonth: \"ماه بعد\",\n     *           prevMonth: \"ماه قبل\",\n     *      }\n     *  },\n     *  en: { ... }\n     * }\n     */\n    localeConfig: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    /**\n     * Timezone configuration\n     * @type String | Boolean | Function\n     * @default false\n     * @example true | false | +03:30 | +04:30\n     * @version 2.1.0\n     */\n    timezone: {\n      type: [Boolean, String, Function],\n      default: false\n    }\n  },\n  data: function data() {\n    var coreModule = new core(this.calendar, this.locale);\n    return {\n      core: coreModule,\n      now: coreModule.moment(),\n      date: {},\n      selectedDate: {},\n      visible: false,\n      directionClass: '',\n      directionClassDate: '',\n      directionClassTime: '',\n      classFastCounter: '',\n      steps: ['y', 'm', 'd', 't'],\n      step: 0,\n      shortCodes: {\n        year: 'y',\n        month: 'm',\n        day: 'd',\n        time: 't'\n      },\n      time: {},\n      timeData: {\n        transitionSpeed: 300,\n        timeout: false,\n        lastUpdate: new Date().getTime()\n      },\n      minDate: false,\n      maxDate: false,\n      output: '',\n      updateNowInterval: null,\n      locales: ['en'],\n      localeData: coreModule.locale\n    };\n  },\n  computed: {\n    id: function id() {\n      return '_' + Math.random().toString(36).substr(2, 9);\n    },\n    input: function input() {\n      var input = false;\n      if (this.value !== '' && this.value !== null && this.value.length !== 0) {\n        try {\n          input = this.core.moment(this.value, this.selfFormat);\n        } catch (er) {\n          input = false;\n        }\n      }\n      return input;\n    },\n    currentStep: function currentStep() {\n      return this.steps[this.step];\n    },\n    formattedDate: function formattedDate() {\n      var format = '';\n      if (this.hasStep('y')) format = this.calendar === 'hijri' ? 'iYYYY' : 'jYYYY';\n      if (this.hasStep('m')) format += this.calendar === 'hijri' ? 'iMMMM ' : 'jMMMM ';\n      if (this.hasStep('d')) format = this.calendar === 'hijri' ? 'ddd iDD iMMMM' : 'ddd jDD jMMMM';\n      if (this.hasStep('t')) format += ' HH:mm ';\n      return format ? this.selectedDate.xFormat(format) : '';\n    },\n    month: function month() {\n      var _this = this;\n      if (!this.hasStep('d')) return [];\n      var m = this.core.getWeekArray(this.date.clone().startOf('day'));\n      var data = [];\n      var selected = false;\n      var selectedStart = this.selectedDate.clone().startOf('day');\n      var min = this.minDate ? this.minDate.clone().startOf('day').unix() : -Infinity;\n      var max = this.maxDate ? this.maxDate.clone().endOf('day').unix() : Infinity;\n      m.forEach(function (w) {\n        var week = [];\n        w.forEach(function (d) {\n          var sel = d === null || selected ? false : Math.abs(selectedStart.diff(d, 'hours')) < 20;\n          var m = _this.core.moment(d);\n          week.push({\n            date: d,\n            formatted: d === null ? '' : m.xDate(),\n            selected: sel,\n            disabled: _this.minDate && m.clone().startOf('day').unix() < min || _this.maxDate && m.clone().endOf('day').unix() > max || d && _this.checkDisable('d', m),\n            attributes: d ? _this.getHighlights('d', m) : {}\n          });\n          selected = sel;\n        });\n        data.push(week);\n      });\n      return data;\n    },\n    years: function years() {\n      var _this2 = this;\n      if (!this.hasStep('y') || this.currentStep !== 'y') return [];\n      var moment = this.core.moment;\n      var min = this.minDate ? this.minDate.xYear() : moment(this.calendar === 'hijri' ? '1340' : '1300', this.calendar === 'hijri' ? 'iYYYY' : 'jYYYY').xYear();\n      var max = this.maxDate ? this.maxDate.xYear() : moment(this.calendar === 'hijri' ? '1472' : '1430', this.calendar === 'hijri' ? 'iYYYY' : 'jYYYY').xYear();\n      var cy = this.date.xYear();\n      return this.core.getYearsList(min, max).reverse().map(function (item) {\n        var year = moment().xYear(item);\n        year.selected = cy === item;\n        year.disabled = _this2.checkDisable('y', item);\n        year.attributes = _this2.getHighlights('y', item);\n        return year;\n      });\n    },\n    months: function months() {\n      var _this3 = this;\n      if (this.hasStep('m')) {\n        var date = this.date.clone().xStartOf('month');\n        var months = this.core.getMonthsList(this.minDate, this.maxDate, date);\n        months.forEach(function (m) {\n          m.selected = _this3.date.xMonth() === m.xMonth();\n          m.disabled = m.disabled || _this3.checkDisable('m', m);\n          m.attributes = _this3.getHighlights('m', m);\n        });\n        return months;\n      }\n      return [];\n    },\n    prevMonthDisabled: function prevMonthDisabled() {\n      return this.hasStep('d') && this.minDate && this.minDate.clone().xStartOf('month').unix() >= this.date.clone().xStartOf('month').unix();\n    },\n    nextMonthDisabled: function nextMonthDisabled() {\n      return this.hasStep('d') && this.maxDate && this.maxDate.clone().xStartOf('month').unix() <= this.date.clone().xStartOf('month').unix();\n    },\n    canGoToday: function canGoToday() {\n      if (!this.minDate && !this.maxDate) return true;\n      var now = this.now.unix(),\n        min = this.minDate && this.minDate.unix() <= now,\n        max = this.maxDate && now <= this.maxDate.unix();\n      if (this.type === 'time') {\n        if (this.minDate) {\n          min = this.now.clone().hour(this.minDate.hour()).minute(this.minDate.minute());\n          min = min.unix() <= now;\n        }\n        if (this.maxDate) {\n          max = this.now.clone().hour(this.maxDate.hour()).minute(this.maxDate.minute());\n          max = now <= max.unix();\n        }\n      }\n      if (this.minDate && this.maxDate) return min && max;\n      if (this.minDate) return min;\n      if (this.maxDate) return max;\n      return false;\n    },\n    altFormatted: function altFormatted() {\n      var format = this.altFormat;\n      if (format === '' || format === undefined) {\n        switch (this.type) {\n          case 'time':\n            format = 'HH:mm:ss [GMT]ZZ';\n            break;\n          case 'datetime':\n            format = 'YYYY-MM-DD HH:mm:ss [GMT]ZZ';\n            break;\n          case 'date':\n            format = 'YYYY-MM-DD';\n            break;\n          case 'year':\n            format = 'YYYY';\n            break;\n          case 'month':\n            format = 'MM';\n            break;\n          case 'year-month':\n            format = 'YYYY-MM';\n            break;\n        }\n      }\n      return this.output ? this.output.format(format) : '';\n    },\n    selfFormat: function selfFormat() {\n      var format = this.format;\n      if (format === '' || format === undefined) {\n        switch (this.type) {\n          case 'time':\n            format = 'HH:mm';\n            break;\n          case 'datetime':\n            format = this.calendar === 'hijri' ? 'iYYYY/iMM/iDD HH:mm' : this.calendar === 'jalali' ? 'jYYYY/jMM/jDD HH:mm' : 'YYYY/MM/DD HH:mm';\n            break;\n          case 'date':\n            format = this.calendar === 'hijri' ? 'iYYYY/iMM/iDD' : this.calendar === 'jalali' ? 'jYYYY/jMM/jDD' : 'YYYY/MM/DD';\n            break;\n          case 'year':\n            format = this.calendar === 'hijri' ? 'iYYYY' : this.calendar === 'jalali' ? 'jYYYY' : 'YYYY';\n            break;\n          case 'month':\n            format = this.calendar === 'hijri' ? 'iMM' : this.calendar === 'jalali' ? 'jMM' : 'MM';\n            break;\n          case 'year-month':\n            format = this.calendar === 'hijri' ? 'iYYYY/iMM' : this.calendar === 'jalali' ? 'jYYYY/jMM' : 'YYYY/MM';\n            break;\n        }\n      }\n      return format;\n    },\n    selfInputFormat: function selfInputFormat() {\n      return this.inputFormat === '' || this.inputFormat === undefined ? this.selfFormat : this.inputFormat;\n    },\n    outputValue: function outputValue() {\n      if (!this.output) return '';\n      var output = this.output.clone();\n      var format = this.selfFormat;\n      // if (/j\\w/.test(format)) {\n      //   if (this.calendar === 'jalali') output.locale('fa')\n      //   else if (this.calendar === 'hijri') output.locale('ar-sa')\n      // output.locale(this.locale);\n      // }\n      this.setTimezone(output, 'out');\n      return output.format(format);\n    },\n    displayValue: function displayValue() {\n      if (!this.output) return '';\n      var output = this.output.clone();\n      var format = this.localeData.config.displayFormat || this.displayFormat || this.selfFormat;\n      // if (/j\\w/.test(format)) {\n      //   if (this.calendar === 'jalali') output.locale('fa')\n      //   else if (this.calendar === 'hijri') output.locale('ar-sa')\n      // output.locale(this.locale);\n      // }\n      return output.format(format);\n    },\n    isDisableTime: function isDisableTime() {\n      return this.hasStep('t') && this.checkDisable('t', this.time);\n    },\n    timeAttributes: function timeAttributes() {\n      return this.hasStep('t') ? this.getHighlights('t', this.time) : {};\n    },\n    canSubmit: function canSubmit() {\n      if (!this.disable) return true;\n      var can = true;\n      if (this.hasStep('t')) can = !this.isDisableTime;\n      if (can && this.type !== 'time') can = !this.checkDisable('d', this.date);\n      return can;\n    },\n    weekDays: function weekDays() {\n      var names = JSON.parse(JSON.stringify(this.core.moment().localeData().weekdaysMin()));\n      var dow = this.core.locale.config.dow;\n      while (dow > 0) {\n        names.push(names.shift());\n        dow--;\n      }\n      return names;\n    },\n    lang: function lang() {\n      return this.localeData.config.lang;\n    }\n  },\n  watch: {\n    type: {\n      handler: 'setType',\n      immediate: true\n    },\n    view: {\n      handler: 'setView',\n      immediate: true\n    },\n    value: {\n      handler: 'updateDates',\n      immediate: true\n    },\n    min: {\n      handler: 'setMinMax',\n      immediate: true\n    },\n    max: {\n      handler: 'setMinMax',\n      immediate: true\n    },\n    timezone: {\n      handler: 'updateDates'\n    },\n    inline: {\n      handler: function handler(val) {\n        if (!this.disabled) this.visible = !!val;\n      },\n      immediate: true\n    },\n    disabled: {\n      handler: function handler(val) {\n        if (val) this.visible = false;else if (this.inline) this.visible = true;\n      },\n      immediate: true\n    },\n    selectedDate: function selectedDate(val, old) {\n      this.setDirection('directionClass', val, old);\n    },\n    date: function date(val, old) {\n      this.setDirection('directionClassDate', val, old);\n      this.checkScroll();\n      if (this.isLower(this.date)) this.date = this.minDate.clone();\n      if (this.isMore(this.date)) this.date = this.maxDate.clone();\n    },\n    time: {\n      handler: function handler(val, old) {\n        if (this.hasStep('t') && this.roundMinute) {\n          var time = this.time.clone();\n          var jm = this.jumpMinute;\n          var m = (jm - time.minute() % jm) % jm;\n          time.add({\n            m: m\n          });\n          if (time.valueOf() !== this.time.valueOf()) {\n            this.time = time;\n            this.selectedDate.set({\n              m: time.minute()\n            });\n          }\n        }\n        if (old) this.setDirection('directionClassTime', val, old);\n      },\n      immediate: true\n    },\n    visible: function visible(val) {\n      var _this4 = this;\n      if (val) {\n        if (this.disabled) return this.visible = false;\n        if (this.type === 'datetime' && this.view === 'day') this.goStep('d');\n        if (this.view !== 'day') this.goStep(this.shortCodes[this.view] || 'd');\n        this.$nextTick(function () {\n          if (_this4.appendTo) {\n            try {\n              var container = document.querySelector(_this4.appendTo);\n              container.appendChild(_this4.$refs.picker);\n            } catch (er) {\n              // eslint-disable-next-line\n              console.warn(\"Cannot append picker to \\\"\".concat(_this4.appendTo, \"\\\"!\"));\n            }\n          }\n        });\n        this.checkScroll();\n        this.$emit('open', this);\n      } else {\n        if (this.inline && !this.disabled) return this.visible = true;\n        this.$emit('close', this);\n      }\n    },\n    show: function show(val) {\n      this.visible = val;\n    },\n    locale: {\n      handler: function handler(val) {\n        var allowedLocales = ['fa', 'en', 'fr', 'ka', 'ar-sa'];\n        var locales = val.toString().split(',').filter(function (i) {\n          return allowedLocales.indexOf(i) !== -1;\n        });\n        this.locales = locales.length ? locales : ['en'];\n        this.setLocale(this.locales[0]);\n      },\n      immediate: true\n    },\n    localeConfig: {\n      handler: function handler(config) {\n        this.core.setLocalesConfig(config);\n        this.setLocale(this.locales[0]);\n      },\n      deep: true,\n      immediate: true\n    },\n    'localeData.name': function localeDataName() {\n      this.$emit('localeChange', this.localeData);\n      this.setMinMax();\n    }\n  },\n  created: function created() {\n    var _this5 = this;\n    this.updateNowInterval = setInterval(function () {\n      _this5.now = _this5.core.moment();\n    }, 1000);\n  },\n  mounted: function mounted() {\n    var _this6 = this;\n    this.$nextTick(function () {\n      var addEvent = function addEvent(el, type, handler) {\n        if (el.attachEvent) el.attachEvent('on' + type, handler);else el.addEventListener(type, handler);\n      };\n      var live = function live(selector, event, callback, context) {\n        addEvent(context || document, event, function (e) {\n          var found,\n            el = e.target || e.srcElement;\n          while (el && !(found = el.id === selector)) el = el.parentElement;\n          if (found) callback.call(el, e);\n        });\n      };\n      if (_this6.element && !_this6.editable) {\n        live(_this6.element, 'click', _this6.focus);\n      }\n    });\n    document.body.addEventListener('keydown', function (e) {\n      e = e || event;\n      if (e.keyCode === 9 && _this6.visible) _this6.visible = false;\n    });\n  },\n  destroyed: function destroyed() {\n    window.clearInterval(this.updateNowInterval);\n  },\n  methods: {\n    nextStep: function nextStep() {\n      if (this.steps.length <= this.step + 1) {\n        return this.autoSubmit || this.inline ? this.submit() : '';\n      } else {\n        this.step++;\n        this.goStep(this.step);\n      }\n    },\n    goStep: function goStep(i) {\n      this.step = typeof i === 'number' ? i : this.steps.indexOf(i);\n      this.checkScroll();\n    },\n    checkScroll: function checkScroll() {\n      var _this7 = this;\n      var step = this.currentStep;\n      if (step === 'y' || step === 'm' && this.visible) {\n        this.$nextTick(function () {\n          setTimeout(function () {\n            var container = _this7.$refs[{\n              y: 'year',\n              m: 'month'\n            }[step]];\n            if (container) {\n              var top = container.querySelector('.selected');\n              top = top ? top.offsetTop - 110 : 0;\n              utils.scrollTo(container, top, 400);\n            }\n          }, 100);\n        });\n      }\n    },\n    fastUpdateCounter: function fastUpdateCounter(e) {\n      if (!e) this.timeData.transitionSpeed = 300;\n      this.classFastCounter = e ? 'fast-updating' : '';\n    },\n    nextMonth: function nextMonth() {\n      this.date = this.date.clone().xAdd(1, 'month');\n    },\n    prevMonth: function prevMonth() {\n      this.date = this.date.clone().xAdd(-1, 'month');\n    },\n    selectDay: function selectDay(day) {\n      if (!day.date || day.disabled) return;\n      var d = this.core.moment(day.date);\n      var s = this.selectedDate;\n      d.set({\n        hour: s.hour(),\n        minute: s.minute(),\n        second: 0\n      });\n      this.date = d.clone();\n      this.selectedDate = d.clone();\n      this.time = d.clone();\n      this.nextStep();\n    },\n    selectYear: function selectYear(year) {\n      if (year.disabled) return;\n      this.date = this.date.clone().xYear(year.xYear());\n      this.nextStep();\n    },\n    selectMonth: function selectMonth(month) {\n      if (month.disabled) return;\n      this.date = this.date.clone().xMonth(month.xMonth());\n      this.nextStep();\n    },\n    setTime: function setTime(v, k) {\n      var _this8 = this;\n      var time = this.time.clone();\n      time.add(_defineProperty({}, k, v));\n      if (this.type !== 'time') {\n        var date = this.date.clone();\n        time.set({\n          year: date.year(),\n          month: date.month(),\n          date: date.date()\n        });\n        date.set({\n          hour: time.hour(),\n          minute: time.minute()\n        });\n        this.date = date;\n      }\n      if (this.isLower(time)) time = this.minDate.clone();\n      if (this.isMore(time)) time = this.maxDate.clone();\n      this.time = time;\n      var now = new Date().getTime(),\n        def = now - this.timeData.lastUpdate;\n      if (20 < def && def < 300) this.timeData.transitionSpeed = def;\n      this.timeData.lastUpdate = now;\n      window.clearTimeout(this.timeData.timeout);\n      this.timeData.timeout = window.setTimeout(function () {\n        _this8.timeData.transitionSpeed = 300;\n      }, 300);\n    },\n    wheelSetTime: function wheelSetTime(k, e) {\n      var delta = k === 'm' ? this.jumpMinute : 1;\n      this.setTime(e.wheelDeltaY > 0 ? delta : -delta, k);\n    },\n    submit: function submit() {\n      if (this.step < this.steps.length - 1) return this.nextStep();\n      if (this.hasStep('t')) {\n        var t = {\n          hour: this.time.hour(),\n          minute: this.time.minute()\n        };\n        this.date = this.date.set(t).clone();\n        this.selectedDate = this.selectedDate.set(t).clone();\n      }\n      if (['year', 'month', 'year-month'].indexOf(this.type) !== -1) this.selectedDate = this.date.clone();\n      this.output = this.selectedDate.clone();\n      this.visible = false;\n      this.$emit('input', this.outputValue);\n      this.$emit('change', this.selectedDate.clone());\n    },\n    updateDates: function updateDates(d) {\n      if (null === d || VueDatetimeJsvue_type_script_lang_js_typeof(d) !== 'object') {\n        d = this.getMoment(d ? d : this.value || this.initialValue);\n      }\n      this.date = d.isValid() ? d : this.core.moment();\n      this.date = this.setTimezone(this.date, 'in');\n      if (!this.hasStep('t')) this.date.set({\n        hour: 0,\n        minute: 0,\n        second: 0\n      });\n      if (this.isLower(this.date)) {\n        this.date = this.minDate.clone();\n      } else if (this.isMore(this.date)) {\n        this.date = this.maxDate.clone();\n      }\n      this.selectedDate = this.date.clone();\n      this.time = this.date.clone();\n      if (this.value !== '' && this.value !== null && this.value.length !== 0) {\n        this.output = this.selectedDate.clone();\n      } else {\n        this.output = null;\n        //this.$forceUpdate()\n      }\n    },\n    goToday: function goToday() {\n      var now = this.core.moment();\n      if (!this.hasStep('t')) now.set({\n        hour: 0,\n        minute: 0,\n        second: 0\n      });\n      this.date = now.clone();\n      this.time = now.clone();\n      this.selectedDate = now.clone();\n    },\n    setType: function setType() {\n      switch (this.type) {\n        case 'date':\n          this.steps = ['y', 'm', 'd'];\n          this.goStep('d');\n          break;\n        case 'datetime':\n          this.steps = ['y', 'm', 'd', 't'];\n          this.goStep('d');\n          break;\n        case 'year':\n          this.steps = ['y'];\n          this.goStep('y');\n          break;\n        case 'month':\n          this.steps = ['m'];\n          this.goStep('m');\n          break;\n        case 'time':\n          this.steps = ['t'];\n          this.goStep('t');\n          break;\n        case 'year-month':\n          this.steps = ['y', 'm'];\n          this.goStep('y');\n          break;\n      }\n    },\n    setView: function setView() {\n      var s = this.shortCodes[this.view];\n      if (this.hasStep(s)) this.goStep(s);\n    },\n    setDirection: function setDirection(prop, val, old) {\n      if (typeof old.unix === 'function') {\n        this[prop] = val.unix() > old.unix() ? 'direction-next' : 'direction-prev';\n      }\n    },\n    setMinMax: function setMinMax() {\n      var min = this.getMoment(this.min),\n        max = this.getMoment(this.max);\n      this.minDate = this.min && min.isValid() ? min : false;\n      this.maxDate = this.max && max.isValid() ? max : false;\n    },\n    getMoment: function getMoment(date) {\n      var d,\n        moment = this.core.moment;\n      if (this.selfInputFormat === 'x' || this.selfInputFormat === 'unix') {\n        d = moment(date.toString().length === 10 ? date * 1000 : date * 1);\n      } else {\n        try {\n          if (date) {\n            var a = moment(date, this.selfInputFormat);\n            var b = moment(date, this.selfFormat);\n            var now = moment(),\n              year = now.xYear();\n            if (this.type === 'month') {\n              a.xYear(year);\n              b.xYear(year);\n            } else if (this.type === 'time') {\n              a = now.clone().set({\n                h: a.hour(),\n                m: a.minute(),\n                s: 0\n              });\n              b = a.clone();\n            }\n            if (a.year() !== b.year() && a.year() < 1900) {\n              d = b.clone();\n            } else {\n              d = a.clone();\n            }\n          } else {\n            d = moment();\n          }\n        } catch (er) {\n          d = moment();\n        }\n      }\n      return d;\n    },\n    focus: function focus(e) {\n      if (!this.editable) {\n        e.preventDefault();\n        e.stopPropagation();\n        e.target.blur();\n        this.visible = true;\n        return false;\n      }\n    },\n    prefix: function prefix(c) {\n      return 'vpd-' + c;\n    },\n    hasStep: function hasStep(step) {\n      return this.steps.indexOf(step) !== -1;\n    },\n    setOutput: function setOutput(e) {\n      if (!this.editable) return;\n      var val = e.target.value;\n      this.output = null;\n      if (val) {\n        try {\n          this.output = this.core.moment(val, this.localeData.config.displayFormat || this.displayFormat || this.selfFormat);\n          if (!this.output.isValid()) this.output = null;\n        } catch (er) {\n          this.output = null;\n        }\n      }\n      if (this.output) {\n        this.updateDates(this.output.clone());\n        this.submit();\n      } else {\n        //this.$forceUpdate()\n        this.$emit('input', null);\n        this.$emit('change', null);\n      }\n    },\n    wrapperClick: function wrapperClick() {\n      this.visible = false;\n      if (this.wrapperSubmit && this.canSubmit) {\n        this.submit();\n      }\n    },\n    applyDevFn: function applyDevFn(fn, k) {\n      var result = false;\n      var args = Array.prototype.splice.call(arguments, 2);\n      try {\n        args.push({\n          y: 'year',\n          m: 'month',\n          d: 'day',\n          t: 'time'\n        }[k]);\n        result = fn.apply(null, args);\n      } catch (er) {\n        // eslint-disable-next-line\n        console.error(er);\n      }\n      return result;\n    },\n    checkDisable: function checkDisable(item, value) {\n      var _this9 = this;\n      var thisDisable = this.disable;\n      if (!thisDisable) return false;\n      var type = VueDatetimeJsvue_type_script_lang_js_typeof(thisDisable);\n      var checkString = function checkString(filter, str, date) {\n        if (filter instanceof RegExp) return filter.test(str);\n        if (filter === str) return true;\n        if (item === 'd') {\n          var length = filter.length;\n          return str.substr(0, length) === filter || date.clone().locale('en').format('dddd') === filter;\n        }\n        return false;\n      };\n      var check = function check(date, dateFormatted) {\n        var matches = false;\n        if (type === 'function') {\n          return _this9.applyDevFn(thisDisable, item, dateFormatted, date.clone());\n        } else if (Object.prototype.toString.call(thisDisable) === '[object Array]') {\n          var ii = thisDisable.length;\n          for (var i = 0; i < ii; i++) {\n            matches = checkString(thisDisable[i], dateFormatted, date);\n            if (matches) break;\n          }\n          return matches;\n        } else if (type === 'string' || thisDisable instanceof RegExp) {\n          return checkString(thisDisable, dateFormatted, date);\n        }\n        return false;\n      };\n      if (item === 'y') value = this.core.moment(value, this.calendar === 'hijri' ? 'iYYYY' : 'jYYYY');\n      return check(value, value.format(this.selfFormat));\n    },\n    getHighlights: function getHighlights(item, value) {\n      var highlight = this.highlight;\n      if (!highlight || typeof highlight !== 'function') return {};\n      if (item === 'y') value = this.core.moment(value, this.calendar === 'hijri' ? 'iYYYY' : 'jYYYY');\n      return this.applyDevFn(highlight, item, value.format(this.selfFormat), value.clone()) || {};\n    },\n    isLower: function isLower(date) {\n      return this.minDate && date.unix() < this.minDate.unix();\n    },\n    isMore: function isMore(date) {\n      return this.maxDate && date.unix() > this.maxDate.unix();\n    },\n    clearValue: function clearValue() {\n      if (this.disabled) return;\n      this.$emit('input', '');\n      this.$emit('change', null);\n    },\n    setLocale: function setLocale(locale) {\n      this.core.changeLocale(this.calendar, locale, this.localeConfig);\n      this.date = this.date.clone();\n      this.selectedDate = this.selectedDate.clone();\n      //this.$forceUpdate()\n    },\n    setTimezone: function setTimezone(date, mode) {\n      var tz = this.timezone;\n      var r = mode === 'in' ? 1 : -1;\n      var moment = this.core.moment;\n      if (tz) {\n        if (typeof tz === 'string') {\n          var t = moment().utc().format('YYYY-MM-DDTHH:mm:ss') + tz;\n          date.add(moment.parseZone(t).utcOffset() * r, 'minutes');\n        } else if (typeof tz === 'boolean' && tz) {\n          date.subtract(new Date().getTimezoneOffset() * r, 'minutes');\n        } else if (typeof tz === 'function') {\n          date = tz(date, mode, this);\n        }\n      }\n      return date.clone();\n    }\n  }\n  // install(app, options) {\n  //   let component = this\n  //   options = app.util.extend(\n  //     {\n  //       name: 'data-picker',\n  //       props: {}\n  //     },\n  //     options\n  //   )\n  //\n  //   for (let k in options.props) {\n  //     if (component.props.hasOwnProperty(k)) {\n  //       component.props[k].default = options.props[k]\n  //     }\n  //   }\n  //   app.component(options.name, component)\n  // }\n});\n;// CONCATENATED MODULE: ./src/picker/VueDatetimeJs.vue?vue&type=script&lang=js\n \n;// CONCATENATED MODULE: ./src/picker/VueDatetimeJs.vue\n\n\n\n\n;\nconst VueDatetimeJs_exports_ = /*#__PURE__*/(0,exportHelper/* default */.A)(VueDatetimeJsvue_type_script_lang_js, [['render',render]])\n\n/* harmony default export */ var VueDatetimeJs = (VueDatetimeJs_exports_);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///808\n")},699:function(module,__unused_webpack_exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(142);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = (__webpack_require__(534)/* [\"default\"] */ .A)\nvar update = add(\"03d4d0f1\", content, true, {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk5LmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEdBQXFLO0FBQzNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSw4Q0FBb0Y7QUFDOUYsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVnVlRGF0ZXRpbWVKcy8uL3NyYy9waWNrZXIvYXNzZXRzL3Njc3Mvc3R5bGUuc2Nzcz9jMzdmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIwM2Q0ZDBmMVwiLCBjb250ZW50LCB0cnVlLCB7fSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///699\n")},534:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: function() { return /* binding */ addStylesClient; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nfunction listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n;// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesClient.js\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\n\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nfunction addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///534\n")},239:function(g){"use strict";g.exports=__WEBPACK_EXTERNAL_MODULE__239__},380:function(g){"use strict";g.exports=__WEBPACK_EXTERNAL_MODULE__380__}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var C=__webpack_module_cache__[g]={id:g,loaded:!1,exports:{}};return __webpack_modules__[g].call(C.exports,C,C.exports,__webpack_require__),C.loaded=!0,C.exports}__webpack_require__.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=function(g,I){for(var C in I)__webpack_require__.o(I,C)&&!__webpack_require__.o(g,C)&&Object.defineProperty(g,C,{enumerable:!0,get:I[C]})},__webpack_require__.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},__webpack_require__.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},__webpack_require__.nmd=function(g){return g.paths=[],g.children||(g.children=[]),g};var __webpack_exports__=__webpack_require__(808);return __webpack_exports__}()}));